#+TITLE: MMy Doom Emacs configurationy Doom Emacs configuration#+AUTHOR: Eejain Huang#+EMAIL: huangyizhen2002@gmail.com#+LANGUAGE: en#+STARTUP: overview inlineimages#+PROPERTY: header-args :tangle yes :cache yes :results silent :padline no* TOC :toc:- [[#intro][Intro]]  - [[#forewords][Forewords]]  - [[#instructions][Instructions]]- [[#global-backends][Global Backends]]  - [[#doom-default][doom default]]  - [[#change-the-default-encoding-to-utf-8-more-suitable-for-multi-lan-environment][change the default encoding to UTF-8, more suitable for multi-lan environment]]  - [[#do-not-create-lockfiles-for-files-being-edited][do not create lockfiles for files being edited]]  - [[#company-config][company config]]  - [[#ivy-config][ivy config]]  - [[#dired-config][dired config]]  - [[#arcv-save-buffer-then-close-buffer][ARCV save buffer then close buffer]]  - [[#arcv-from-alfred-org-capture-package][ARCV from alfred-org-capture package]]- [[#global-looks][Global Looks]]  - [[#color-scheme-and-font][color scheme and font]]  - [[#set-up-cursor-shape-in-iterm-emacs-for-indicating-editnormal-mode][set up cursor shape in iterm emacs for indicating edit/normal mode]]  - [[#function-to-set-visual-line-width][function to set visual line width]]- [[#global-editing][Global Editing]]  - [[#key-binding-for-emacs-in-iterm2-environment][key binding for emacs in iterm2 environment]]  - [[#copy-paste-from-external-clipboard-for-terminal-emacs-window][copy paste from external clipboard (for terminal emacs window)]]- [[#org-mode-backends][Org Mode Backends]]  - [[#org-directory][Org directory]]  - [[#org-keywords-and-tags][Org keywords and tags]]  - [[#org-setup][Org setup]]  - [[#org-capture][Org capture]]  - [[#org-journal][org-journal]]  - [[#org-babel][org-babel]]- [[#org-mode-looks][Org Mode Looks]]  - [[#change-the-character-that-displays-on-collapsed-headings][change the character that displays on collapsed headings]]  - [[#line-wrapping][line wrapping]]  - [[#arcv-change-the-default-bullet-character][ARCV Change the default bullet character]]  - [[#arcv-fonts][ARCV Fonts]]  - [[#arcv-strike-through-done-headlines][ARCV Strike through done headlines]]- [[#org-mode-editing][Org Mode Editing]]  - [[#key-binding-for-showing-all-todo-headings][key binding for showing all todo headings]]  - [[#key-binding-for-outline-quicklookgoto][key binding for outline quicklook/goto]]  - [[#key-binding-for-jumping-to-the-end-of-the-line][key binding for jumping to the end of the line]]  - [[#key-binding-to-insert-newlines-above-and-below][key binding to insert newlines above and below]]  - [[#function-to-duplicate-certain-line][function to duplicate certain line]]  - [[#function-to-create-new-scratch-buffer-in-org][function to create new scratch buffer in Org]]  - [[#auto-update-org-toc][auto update Org toc]]- [[#org-mode-modules][Org Mode Modules]]- [[#markdown-mode-looks][Markdown Mode Looks]]- [[#hugo-related-config][Hugo related config]]- [[#r-related-config][R related config]]  - [[#ess-r-config][ESS R config]]  - [[#combine-r-and-markdown-mode-in-one-buffer-with-polymode][Combine R and markdown mode in one buffer with polymode]]- [[#appendix][Appendix]]  - [[#initel][init.el]]  - [[#pacakgesel][pacakges.el]]* Intro** Forewords- A few words about my background. I'm a researcher in the field of social science. I don't program much, but Emacs is essential for both my work and leisure projects. I'm using Emacs for interacting with R environment, composing long format texts, and managing my schedule as well as logging everyday life.- I'm using [[https://formulae.brew.sh/formula/emacs][GNU Emacs]] under the [[https://github.com/hlissner/doom-emacs][Doom Emacs]] configuration framework. I'm running my Emacs in[[https://www.iterm2.com/][ iTerm2]]--a terminal emulator for macOS.** Instructions- Run the following in the terminal. References: https://github.com/hlissner/doom-emacs/blob/develop/docs/getting_started.org#+BEGIN_SRC sh :exports code :tangle nobrew install git ripgrepbrew install coreutils fdxcode-select --installbrew install emacsgit clone https://github.com/hlissner/doom-emacs ~/.emacs.d~/.emacs.d/bin/doom install#+END_SRC- Add ~export PATH=~/.emacs.d/bin:$PATH~ in .zshrc to use the bin/doom utility anywhere in terminal- Turn on ~literate~ in init.el in .dooms.d, then create config.org- Run ~M-x doom/reload~ in Emacs after changing the config.org, this will extract the Lisp source codes automatically to config.el- Run ~doom sync~ in terminal every time the package.el is changed- How to debug:  - turn on ~toggle-debug-on-error~, then ~doom/reload~  - run ~doom doctor~ in terminal* Global Backends** doom default#+BEGIN_SRC emacs-lisp(package-initialize t)(setq user-full-name "Eejain Huang"      user-mail-address "huangyizhen2002@hotmail.com");; (setq initial-major-mode 'org-mode)#+END_SRC** change the default encoding to UTF-8, more suitable for multi-lan environment#+BEGIN_SRC emacs-lisp(prefer-coding-system       'utf-8)(set-default-coding-systems 'utf-8)(set-terminal-coding-system 'utf-8)(set-keyboard-coding-system 'utf-8)(setq default-buffer-file-coding-system 'utf-8)#+END_SRC** do not create lockfiles for files being editedreferences: https://github.com/Brettm12345/doom-emacs-literate-config/blob/master/config.org#completioncompany#+BEGIN_SRC emacs-lisp  (setq create-lockfiles nil)#+END_SRC** company configreference: https://github.com/Brettm12345/doom-emacs-literate-config/blob/master/config.org#completioncompany*** Set maximum candidates for ~company-box~#+BEGIN_SRC emacs-lisp  (after! company-box    (setq company-box-max-candidates 5))#+END_SRC*** Setup ~company-perscient~#+BEGIN_SRC emacs-lisp  (use-package company-prescient    :after company    :hook (company-mode . company-prescient-mode))#+END_SRC*** Setup company ui#+BEGIN_SRC emacs-lisp  (after! company    (setq company-tooltip-limit 5          company-tooltip-minimum-width 80          company-tooltip-minimum 5          company-backends          '(company-capf company-dabbrev company-files company-yasnippet)          company-global-modes '(not comint-mode erc-mode message-mode help-mode gud-mode)))#+END_SRC** ivy configreference: https://github.com/Brettm12345/doom-emacs-literate-config/blob/master/config.org#completioncompany*** Set ripgrep as the default program for ivy project search#+BEGIN_SRC emacs-lisp  (setq +ivy-project-search-engines '(rg))#+END_SRC*** Setup ~ivy-rich~#+BEGIN_SRC emacs-lisp(after! ivy-rich  (setq ivy-rich-display-transformers-list        '(ivy-switch-buffer          (:columns           ((ivy-rich-candidate (:width 30 :face bold))            (ivy-rich-switch-buffer-size (:width 7 :face font-lock-doc-face))            (ivy-rich-switch-buffer-indicators (:width 4 :face error :align right))            (ivy-rich-switch-buffer-major-mode (:width 18 :face doom-modeline-buffer-major-mode))            (ivy-rich-switch-buffer-path (:width 50)))           :predicate           (lambda (cand) (get-buffer cand)))          +ivy/switch-workspace-buffer          (:columns           ((ivy-rich-candidate (:width 30 :face bold))            (ivy-rich-switch-buffer-size (:width 7 :face font-lock-doc-face))            (ivy-rich-switch-buffer-indicators (:width 4 :face error :align right))            (ivy-rich-switch-buffer-major-mode (:width 18 :face doom-modeline-buffer-major-mode))            (ivy-rich-switch-buffer-path (:width 50)))           :predicate           (lambda (cand) (get-buffer cand)))          counsel-M-x          (:columns           ((counsel-M-x-transformer (:width 40))            (ivy-rich-counsel-function-docstring (:face font-lock-doc-face :width 80))))          counsel-describe-function          (:columns           ((counsel-describe-function-transformer (:width 40))            (ivy-rich-counsel-function-docstring (:face font-lock-doc-face :width 80))))          counsel-describe-variable          (:columns           ((counsel-describe-variable-transformer (:width 40))            (ivy-rich-counsel-variable-docstring (:face font-lock-doc-face :width 80))))          counsel-recentf          (:columns           ((ivy-rich-candidate (:width 100))            (ivy-rich-file-last-modified-time (:face font-lock-doc-face)))))))(after! counsel  (setq counsel-evil-registers-height 20        counsel-yank-pop-height 20        counsel-org-goto-face-style 'org        counsel-org-headline-display-style 'title        counsel-org-headline-display-tags t        counsel-org-headline-display-todo t))#+END_SRC#+BEGIN_SRC emacs-lisp  (after! ivy    (setq ivy-posframe-parameters          `((min-width . 160)            (min-height . ,ivy-height)            (left-fringe . 0)            (right-fringe . 0)            (internal-border-width . 10))          ivy-display-functions-alist          '((counsel-git-grep)            (counsel-grep)            (counsel-pt)            (counsel-ag)            (counsel-rg)            (counsel-notmuch)            (swiper)            (counsel-irony . ivy-display-function-overlay)            (ivy-completion-in-region . ivy-display-function-overlay)            (t . ivy-posframe-display-at-frame-center))))(after! ivy  (setq ivy-use-selectable-prompt t        ivy-auto-select-single-candidate t        ivy-rich-parse-remote-buffer nil        +ivy-buffer-icons nil        ivy-use-virtual-buffers nil        ivy-magic-slash-non-match-action 'ivy-magic-slash-non-match-cd-selected        ivy-height 20        ivy-rich-switch-buffer-name-max-length 50))#+END_SRC*** Add helpful action to ~counsel-M-x~#+BEGIN_SRC emacs-lisp  (after! ivy    (ivy-add-actions     'counsel-M-x     `(("h" +ivy/helpful-function "Helpful"))))#+END_SRC*** Setup ~counsel-tramp~#+BEGIN_SRC emacs-lisp  (use-package counsel-tramp    :commands (counsel-tramp))#+END_SRC*** Setup [[github:asok/all-the-icons-ivy][all-the-icons-ivy]]#+BEGIN_SRC emacs-lisp(use-package all-the-icons-ivy  :after ivy  :config  (dolist (cmd '( counsel-find-file                  counsel-file-jump                  projectile-find-file                  counsel-projectile-find-file                  counsel-dired-jump counsel-projectile-find-dir                  counsel-projectile-switch-project))    (ivy-set-display-transformer cmd #'all-the-icons-ivy-file-transformer)))#+END_SRC** dired configreference: https://github.com/Brettm12345/doom-emacs-literate-config/blob/master/config.org#completioncompany*** Set ~dired-k~ to use human readable styles#+BEGIN_SRC emacs-lisp  (after! dired-k    (setq dired-k-human-readable t))#+END_SRC*** Set ~dired-k~ filesize colors#+BEGIN_SRC emacs-lisp  (after! dired-k    (setq dired-k-size-colors          `((1024 .   ,(doom-lighten (doom-color 'green) 0.3))            (2048 .   ,(doom-lighten (doom-color 'green) 0.2))            (3072 .   ,(doom-lighten (doom-color 'green) 0.1))            (5120 .   ,(doom-color 'green))            (10240 .  ,(doom-lighten (doom-color 'yellow) 0.2))            (20480 .  ,(doom-lighten (doom-color 'yellow) 0.1))            (40960 .  ,(doom-color 'yellow))            (102400 . ,(doom-lighten (doom-color 'orange) 0.2))            (262144 . ,(doom-lighten (doom-color 'orange) 0.1))            (524288 . ,(doom-color 'orange)))))#+END_SRC*** Enable ~diredfl-mode~ on ~dired~ buffers#+BEGIN_SRC emacs-lisp  (use-package diredfl    :hook (dired-mode . diredfl-mode))#+END_SRC*** Setup ~peep-dired~#+BEGIN_SRC emacs-lisp  (use-package peep-dired    :after dired    :defer t    :commands (peep-dired))#+END_SRC** ARCV save buffer then close buffer#+BEGIN_SRC emacs-lisp  (defun save-entry-and-exit()    "Saves the buffer and kills the window"    (interactive)    (save-buffer)    (kill-buffer-and-window))  (global-set-key (kbd "C-c C-.") 'save-entry-and-exit)#+END_SRC** ARCV from alfred-org-capture packageCLOSED: [2020-06-03 Wed 12:29]httpse//github.com/jjasghar/alfred-org-capture/blob/master/el/alfred-org-capture.elOR directly run /Users/naskuv/.emacs.d/bin/org-capture in alfred also pop out the capture window#+BEGIN_SRC emacs-lisp  (defun make-orgcapture-frame-new ()    "Create a new frame and run org-capture."    (interactive)    (make-frame '((name . "capture") (width . 40) (height . 30)                  (top . 400) (right. 300)                  ))    (select-frame-by-name "capture")    (org-capture))(defun make-orgcapture-frame()  "Create a new frame and run org-capture."  (interactive)  (select-frame-by-name "capture")  (org-capture))(defun make-agenda-frame-new ()  (interactive)  (make-frame '((name . "agenda") (width . 80) (height . 30)                (top . 400) (right. 300)                ))  (select-frame-by-name "agenda")  (org-agenda))(defun make-agenda-frame ()  (interactive)  (select-frame-by-name "agenda")  (org-agenda))#+END_SRC* Global Looks** color scheme and font#+begin_src emacs-lisp(setq doom-font (font-spec :faimily "monospace" :size 14))(setq doom-theme 'doom-tomorrow-night);; (setq doom-theme 'doom-tomorrow-day);; (setq display-line-numbers-style 'relative)#+end_src** set up cursor shape in iterm emacs for indicating edit/normal modethe cursor shape of different vim mode is identical by default. use package term-cursor#+BEGIN_SRC emacs-lisp  ;; (defun my-set-cursor (spec);;   (if (display-graphic-p);;       (set cursor-type spec);;     (unless (equal cursor-type spec);;       (let ((shape (or (car-safe spec) spec));;             (param));;         (setq param;;               (cond ((eq shape 'bar) "6");;                     ((eq shape 'hbar) "4");;                     (t "2")));;         (send-string-to-terminal;;          (concat "\e[" param " q"))))))  (use-package term-cursor)  (global-term-cursor-mode)#+END_SRC** function to set visual line widthreferences: https://www.emacswiki.org/emacs/VisualLineMode#+begin_src emacs-lisp (defvar visual-wrap-column nil) (defun set-visual-wrap-column (new-wrap-column &optional buffer)      "Force visual line wrap at NEW-WRAP-COLUMN in BUFFER (defaults    to current buffer) by setting the right-hand margin on every    window that displays BUFFER.  A value of NIL or 0 for    NEW-WRAP-COLUMN disables this behavior."      (interactive (list (read-number "New visual wrap column, 0 to disable: " (or visual-wrap-column fill-column 0))))      (if (and (numberp new-wrap-column)               (zerop new-wrap-column))        (setq new-wrap-column nil))      (with-current-buffer (or buffer (current-buffer))        (visual-line-mode t)        (set (make-local-variable 'visual-wrap-column) new-wrap-column)        (add-hook 'window-configuration-change-hook 'update-visual-wrap-column nil t)        (let ((windows (get-buffer-window-list)))          (while windows            (when (window-live-p (car windows))              (with-selected-window (car windows)                (update-visual-wrap-column)))            (setq windows (cdr windows))))))    (defun update-visual-wrap-column ()      (if (not visual-wrap-column)        (set-window-margins nil nil)        (let* ((current-margins (window-margins))               (right-margin (or (cdr current-margins) 0))               (current-width (window-width))               (current-available (+ current-width right-margin)))          (if (<= current-available visual-wrap-column)            (set-window-margins nil (car current-margins))            (set-window-margins nil (car current-margins)                                (- current-available visual-wrap-column))))))#+end_src* Global Editing** key binding for emacs in iterm2 environmenthttps://stackoverflow.com/questions/10660060/how-do-i-bind-c-in-emacs/40222318#40222318workflow: in iterm, set preferences-key add a keyboard short cut with emacs keybinding, then choose Send Escape Sequence as the Action, then use themy/global-map-and-set-key funtion below to bind the short cut to the originalemacs function (find out the function by running describe the key function)the current key map in iterm is saved in iterm_emacs.itermkeymap#+BEGIN_SRC emacs-lisp;; define function(defun my/global-map-and-set-key (key command &optional prefix suffix)  "`my/map-key' KEY then `global-set-key' KEY with COMMAND. PREFIX or SUFFIX can wrap the key when passing to `global-set-key'."  (my/map-key key)  (global-set-key (kbd (concat prefix key suffix)) command))(defun my/map-key (key)  "Map KEY from escape sequence \"\e[emacs-KEY\."  (define-key function-key-map (concat "\e[emacs-" key) (kbd key)));; the most important remapping, M-x(my/global-map-and-set-key "M-x" 'counsel-M-x);; comment/uncomment: first bind a new key sequence C-/ (subsitute s-/) for commenting codes, then map iterm key to emacs(map! (:after evil   :m  "C-/" #'evilnc-comment-or-uncomment-lines))(my/global-map-and-set-key "C-/" 'evilnc-comment-or-uncomment-lines);; copy, cut, paste: first require simpleclip package (not working propoerly);; (require 'simpleclip);; (simpleclip-mode 1)(my/global-map-and-set-key "s-x" 'kill-region)(my/global-map-and-set-key "s-c" 'evil-yank)(my/global-map-and-set-key "s-v" 'evil-paste-after);; navigation in calendar view;; https://orgmode.org/manual/The-date_002ftime-prompt.html : use text entry to navigate instead of short cut;; (my/global-map-and-set-key "<S-left>" 'org-agenda-do-date-earlier);; (my/global-map-and-set-key "<S-right>" 'org-agenda-do-date-later);; create new heading below: first change the default keybinding (s-return) to M-return(map! (:after evil   :m  "<M-return>" #'+default/newline-below))(my/global-map-and-set-key "<M-return>" '+default/newline-below);; move lines around(my/global-map-and-set-key "<M-up>" 'drag-stuff-up)(my/global-map-and-set-key "<M-down>" 'drag-stuff-down);; meta drag(my/global-map-and-set-key "<M-S-up>" 'org-shiftmetaup)(my/global-map-and-set-key "<M-S-down>" 'org-shiftmetadown);; outline promote/demote (metaleft/right)(my/global-map-and-set-key "M-h" 'org-metaleft)(my/global-map-and-set-key "M-H" 'org-shiftmetaleft)(my/global-map-and-set-key "M-l" 'org-metaright)(my/global-map-and-set-key "M-L" 'org-shiftmetaright);; for evaluating r codes, not sure whether works or not yet(my/global-map-and-set-key "M-d" 'evil-multiedit-match-symbol-and-next);; currently I disabled arrow keys for navigation, but command(s) + arrow key still work, and in terminal, use shift + arrow keys for normal arrow key behavior;; use ctrl + hjkl to navigate in function menus(my/global-map-and-set-key "<s-left>" 'evil-backward-char)(my/global-map-and-set-key "<s-right>" 'evil-forward-char)(my/global-map-and-set-key "<s-down>" 'evil-next-line)(my/global-map-and-set-key "<s-up>" 'evil-previous-line);; create a new delete shortcut for easier access (works in both normal and insert mode)(map! (:after evil   :m  "s-[" #'evil-delete-backward-char))(my/global-map-and-set-key "s-[" 'evil-delete-backward-char);; for ess-r short cut(my/global-map-and-set-key "<C-return>" 'ess-eval-line)(my/global-map-and-set-key "<C-S-return>" 'ess-eval-region-or-function-or-paragraph)#+END_SRC** copy paste from external clipboard (for terminal emacs window)#+begin_src emacs-lisp(setq osx-clipboard-mode t)#+end_src*** ARCV auto save and load current session layout (desktop)CLOSED: [2020-06-15 Mon 15:07]- State "ARCV"       from "TODO"       [2020-06-15 Mon 15:07]#+begin_src emacs-lisp;; save current window layout and load later: https://emacs.stackexchange.com/questions/2710/switching-between-window-layouts;; (defvar winstack-stack '();;   "A Stack holding window configurations.;; Use `winstack-push' and;; `winstack-pop' to modify it.");; (defun winstack-push();;   "Push the current window configuration onto `winstack-stack'.";;   (interactive);;   (if (and (window-configuration-p (first winstack-stack));;          (compare-window-configurations (first winstack-stack) (current-window-configuration)));;       (message "Current config already pushed");;     (progn (push (current-window-configuration) winstack-stack);;            (message (concat "pushed " (number-to-string;;                                        (length (window-list (selected-frame)))) " frame config")))));; (defun winstack-pop();;   "Pop the last window configuration off `winstack-stack' and apply it.";;   (interactive);;   (if (first winstack-stack);;       (progn (set-window-configuration (pop winstack-stack));;              (message "popped"));;     (message "End of window stack")))(use-package psession  :config  (psession-mode 1))#+end_src* Org Mode Backends** Org directoryref: https://lists.gnu.org/archive/html/emacs-orgmode/2009-10/msg00734.html#+BEGIN_SRC emacs-lisp(setq org-directory "~/GoogleDrive/MarkdownNotes/MDNotes")(setq org-agenda-directory "~/GoogleDrive/MarkdownNotes/MDNotes/")(setq org-agenda-files (directory-files (expand-file-name org-agenda-directory) t                                        "^[^\.][^#][[:alnum:]]+\.org$"))(setq org-default-notes-file (concat org-directory "/notes.org"))#+END_SRC** Org keywords and tagsCLOSED: [2020-04-03 Fri 22:05]- State "DONE"       from "TODO"       [2020-04-03 Fri 22:05] \\  previously I cannot override these settings because I changed setting in M-x  cutomization, now I deleted the content in ~/.emacs.d/.local/custom.el and add  after! org, then things are fine: https://github.com/hlissner/doom-emacs/issues/546#+BEGIN_SRC emacs-lisp  (after! org    (setq org-todo-keywords          '(;; Sequence for TASKS            ;; TODO means it's an item that needs addressing            ;; PEND means it's dependent on something else happening            ;; CANC means it's no longer necessary to finish            ;; DONE means it's complete            (sequence "TODO(t@/!)" "PEND(p@/!)" "|" "DONE(d@/!)" "CANC(c@/!)")            ;; Sequence for MULTIMEDIA            ;; MARK mark some media for future consuming            ;; ING means currently consuming            ;; REPO means the media has been consumed, and waiting to be shared in short or long form            ;; ARCV media alrady repoed, now archive for future reference            (sequence "MARK(m@/!)" "ING(i@/!)" "REPO(r@/!)" "|" "ARCV(a@/!)")            )))#+END_SRC** Org setupCLOSED: [2020-04-03 Fri 22:06]- State "DONE"       from "TODO"       [2020-04-03 Fri 22:06] \\  functions for popup notes window after change todo statehttps://github.com/sk8ingdom/.emacs.d/blob/master/org-mode-config/org-todo-states.el#+BEGIN_SRC emacs-lisp  (after! org    ;; prompt to record time and note when a task is completed    (setq org-log-done 'note)    ;; prompt to record time and note when the scheduled date of a task is modified    (setq org-log-reschedule 'note)    ;; promopt to record time and note when the deadline of a task is modified    (setq org-log-redeadline 'note)    ;; promopt to record time and note when clocking out of a task    (setq org-log-clock-out 'note)    (setq org-agenda-todo-ignore-scheduled 'all)    ;; set the scope of line-editing behavior to the visual line (not actual line)    (setq vim-style-visual-line-move-text t)    )(with-eval-after-load 'org  (add-to-list 'org-modules 'org-habit t))#+END_SRC** Org capturereferences:https://emacs.stackexchange.com/questions/19391/can-t-set-directory-for-org-mode-capturehttps://orgmode.org/manual/Template-expansion.html#Template-expansionhttps://github.com/sk8ingdom/.emacs.d/blob/master/org-mode-config/org-capture-templates.el#+BEGIN_SRC emacs-lisp  (setq org-capture-templates        '(          ("t" "Todo" entry (file+headline "~/Googledrive/Markdownnotes/MDNotes/todo.org" "Inbox") "* TODO %?\n  %U\n")          ("d" "Drafts" entry (file+headline "~/Googledrive/Markdownnotes/MDNotes/todo.org" "Drafts") "* ARCV %?\n  %U\n")          ("j" "Journal" entry (function org-journal-find-location)           "* %(format-time-string org-journal-time-format)%^{Title}\n%i%?")          )        )#+END_SRC** org-journalCLOSED: [2020-04-03 Fri 21:58]- State "DONE"       from "TODO"       [2020-04-03 Fri 21:58] \\references: https://github.com/bastibe/org-journal#+BEGIN_SRC emacs-lisp(customize-set-variable 'org-journal-dir "~/GoogleDrive/Markdownnotes/MDNotes/")(customize-set-variable 'org-journal-date-format "%A, %d %B %Y")(customize-set-variable 'org-journal-file-format "%Y%m%d.org")(require 'org-journal)  ;; (use-package org-journal  ;;   :ensure t  ;;   :defer t  ;;   :custom  ;;   (org-journal-dir "~/GoogleDrive/MarkdownNotes/MDNotes/")  ;;   (org-journal-file-format "%Y%m%d.org")  ;;   (org-journal-date-format "%A, %B %d %Y"))(defun org-journal-find-location ()  ;; Open today's journal, but specify a non-nil prefix argument in order to  ;; inhibit inserting the heading; org-capture will insert the heading.  (org-journal-new-entry t)  ;; Position point on the journal's top-level heading so that org-capture  ;; will add the new entry as a child entry.  (goto-char (point-min)))#+END_SRC** org-babelwrite plain text in org mode with embedded source block supported by [[https://orgmode.org/worg/org-contrib/babel/index.html][Babel: active code in Org-mode]]also see https://orgmode.org/manual/Working-with-Source-Code.html#+begin_src emacs-lisp  (setq org-babel-load-languages        '(          (emacs-lisp. t)          (lisp. t)          (org. t)          (python. t)          (latex. t)          (R. t)));; activate Babel languages(org-babel-do-load-languages 'org-babel-load-languages org-babel-load-languages)  (add-hook 'org-babel-after-execute-hook 'org-display-inline-images)  (add-hook 'org-mode-hook 'org-display-inline-images)#+END_SRC* Org Mode Looks** change the character that displays on collapsed headings#+BEGIN_SRC emacs-lisp  (setq org-ellipsis " ▼ ")#+END_SRC** line wrapping#+begin_src emacs-lisp;; visual line mode will wrap lines at the window border without actually insert line breaks(add-hook 'org-mode-hook #'visual-line-mode);; turn off auto fill mode so there won't be any hard line breaks after the wrap column(add-hook 'org-mode-hook #'turn-off-auto-fill);; also add (setq evil-respect-visual-line-mode t) to init.el, enable navigation in visual line mode (evel-next-visual-line)(add-hook 'org-mode-hook #'adaptive-wrap-prefix-mode)#+end_src** ARCV Change the default bullet character(after! org-bullets(setq org-bullets-bullet-list '("#")))** ARCV Fontsref: https://mstempl.netlify.com/post/beautify-org-mode/ref: https://zzamboni.org/post/beautifying-org-mode-in-emacs/(custom-theme-set-faces 'user '(variable-pitch ((t (:family "Tinos" :height 1)))) '(fixed-pitch ((t ( :family "Hack Nerd Font" :slant normal :weight normal :height 0.9 :width normal)))))(custom-theme-set-faces 'user '(org-block                 ((t (:inherit fixed-pitch)))) '(org-document-info-keyword ((t (:inherit (shadow fixed-pitch))))) '(org-property-value        ((t (:inherit fixed-pitch))) t) '(org-special-keyword       ((t (:inherit (font-lock-comment-face fixed-pitch))))) '(org-tag                   ((t (:inherit (shadow fixed-pitch) :weight bold)))) '(org-verbatim              ((t (:inherit (shadow fixed-pitch)))))) (let* ((variable-tuple        (cond ((x-list-fonts "Tinos") '(:font "Tinos"))              ((x-list-fonts "Lantinghei TC")   '(:font "Lantinghei TC"))              ((x-list-fonts "Anonymous Pro")         '(:font "Anonymous Pro"))              ((x-family-fonts "Serif")    '(:family "Serif"))              (nil (warn "Cannot find a Serif Font.  Install."))))       (base-font-color     (face-foreground 'default nil 'default))       (headline           `(:inherit default :weight bold :foreground ,base-font-color)))  (custom-theme-set-faces   'user   `(org-level-8 ((t (,@headline ,@variable-tuple))))   `(org-level-7 ((t (,@headline ,@variable-tuple))))   `(org-level-6 ((t (,@headline ,@variable-tuple))))   `(org-level-5 ((t (,@headline ,@variable-tuple))))   `(org-level-4 ((t (,@headline ,@variable-tuple))))   `(org-level-3 ((t (,@headline ,@variable-tuple))))   `(org-level-2 ((t (,@headline ,@variable-tuple))))   `(org-level-1 ((t (,@headline ,@variable-tuple))))   `(org-document-title ((t (,@headline ,@variable-tuple :underline nil))))))** ARCV Strike through done headlines(setq org-fontify-done-headline t)(custom-set-faces'(org-done ((t (:weight bold:strike-through t))))'(org-headline-done((((class color) (min-colors 16) (background dark))(:strike-through t)))))* Org Mode Editing** key binding for showing all todo headings#+BEGIN_SRC emacs-lisp  (global-set-key (kbd "C-c t") 'org-show-todo-tree)#+END_SRC** key binding for outline quicklook/goto#+BEGIN_SRC emacs-lisp  (global-set-key (kbd "C-c r") 'counsel-outline)#+END_SRC** key binding for jumping to the end of the line#+BEGIN_SRC emacs-lisp  (map!   (:after evil     :m  "C-e" #'doom/forward-to-last-non-comment-or-eol))#+END_SRC** key binding to insert newlines above and belowSimilar to [[github:tpope/vim-unimpaired][vim-unimpaired]]#+BEGIN_SRC emacs-lisp  (map!   (:after evil     :m  "] SPC" #'evil-motion-insert-newline-below     :m  "[ SPC" #'evil-motion-insert-newline-above))#+END_SRC** function to duplicate certain lineinspired by Sublime Text cmd + shift + d (ref: https://stackoverflow.com/a/88828)#+BEGIN_SRC emacs-lisp  (defun duplicate-line()    (interactive)    (move-beginning-of-line 1)    (kill-line)    (yank)    (open-line 1)    (forward-line 1)    (yank)    )(global-set-key (kbd "C-c D") 'duplicate-line)#+END_SRC** function to create new scratch buffer in Orgref: https://emacs.stackexchange.com/questions/16492/is-it-possible-to-create-an-org-mode-scratch-buffer#+begin_src emacs-lisp(defun org-buffer-new ()"Create a new scratch buffer -- \*hello-world\*"(interactive)  (let ((n 0)        bufname buffer)    (catch 'done      (while t        (setq bufname (concat "*org-scratch"          (if (= n 0) "" (int-to-string n))            "*"))        (setq n (1+ n))        (when (not (get-buffer bufname))          (setq buffer (get-buffer-create bufname))          (with-current-buffer buffer            (org-mode))          ;; When called non-interactively, the `t` targets the other window (if it exists).          (throw 'done (display-buffer buffer t))) ))))  ;; SPC x is the default doom new scratch buffer key binding  (global-set-key (kbd "C-c x") 'org-buffer-new)#+end_src** auto update Org tocCLOSED: [2020-04-09 Thu 17:19]#+begin_src emacs-lisp(if (require 'toc-org nil t)    (add-hook 'org-mode-hook 'toc-org-mode)    ;; enable in markdown, too    (add-hook 'markdown-mode-hook 'toc-org-mode))#+end_src* Org Mode Modules* Markdown Mode Looks#+begin_src emacs-lisp;; similar with org mode, use visual line mode without auto fill(add-hook 'markdown-mode-hook #'visual-line-mode)(add-hook 'markdown-mode-hook #'turn-off-auto-fill);; disable syntax checker (markdownlint-cli) for markdown mode(setq-default flycheck-disabled-checkers '(markdown-markdownlint-cli))#+end_src* Hugo related configreferences:https://ox-hugo.scripter.co/https://mstempl.netlify.com/post/static-website-with-emacs-and-hugo/also see: [[file:~/GoogleDrive/MarkdownNotes/MDNotes/hugo config and workflow.org][hugo config]]#+BEGIN_SRC emacs-lisp(with-eval-after-load 'ox  (require 'ox-hugo))#+END_SRC* R related config** ESS R configreferences: https://iqss.github.io/IQSS.emacs/init.html#run_r_in_emacs_(ess)useful functions: R (run-ess-r), popup/raise, ess-eval-region-or-function-or-paragraph-and-step#+BEGIN_SRC emacs-lisp  (with-eval-after-load "ess"    (add-hook 'ess-r-mode-hook              (lambda()                'eglot-ensure                (make-local-variable 'company-backends)                (delete-dups (push 'company-capf company-backends))                (delete-dups (push 'company-files company-backends))))    (require 'ess-mode)    ;; evaluate codes with ctrl + enter (by line) or ctrl + shift + enter (by paragraph)    (define-key ess-mode-map (kbd "<C-return>") 'ess-eval-line)    (define-key ess-mode-map (kbd "<C-S-return>") 'ess-eval-region-or-function-or-paragraph)    ;; define the same keybindings for normal state (otheriwse the keybinding will only work in edit state)    (with-eval-after-load 'evil-maps      (define-key evil-normal-state-map (kbd "<C-return>") 'ess-eval-line))    (with-eval-after-load 'evil-maps      (define-key evil-normal-state-map (kbd "<C-S-return>") 'ess-eval-region-or-function-or-paragraph))    ;; Set ESS options    (setq     ess-auto-width 'window     ess-use-auto-complete nil     ess-use-company 't     ;; ess-r-package-auto-set-evaluation-env nil     inferior-ess-same-window nil   ess-indent-with-fancy-comments nil ; don't indent comments     ess-eval-visibly t                 ; enable echoing input     ess-eval-empty t                   ; don't skip non-code lines.     ess-ask-for-ess-directory nil ; start R in the working directory by default     ess-ask-for-ess-directory nil ; start R in the working directory by default     ess-R-font-lock-keywords      ; font-lock, but not too much     (quote      ((ess-R-fl-keyword:modifiers)       (ess-R-fl-keyword:fun-defs . t)       (ess-R-fl-keyword:keywords . t)       (ess-R-fl-keyword:assign-ops  . t)       (ess-R-fl-keyword:constants . 1)       (ess-fl-keyword:fun-calls . t)       (ess-fl-keyword:numbers)       (ess-fl-keyword:operators . t)       (ess-fl-keyword:delimiters)       (ess-fl-keyword:=)       (ess-R-fl-keyword:F&T)))))#+END_SRC** Combine R and markdown mode in one buffer with polymode#+begin_src emacs-lisp  (use-package polymode)  (use-package poly-R)  (use-package poly-markdown    :config    (add-to-list 'auto-mode-alist '("\\.rmd" . poly-markdown+R-mode))    )(with-eval-after-load "markdown"  (use-package poly-markdown))(with-eval-after-load "org"  (use-package poly-org))#+end_src* AppendixOther private configurations that are not yet in literate format.** init.el#+begin_src emacs-lisp :tangle no :exports code(doom! :input       ;;chinese       ;;japanese       :completion       (company +auto +childframe)       (ivy +fuzzy +childframe)       :ui       (popup +all +defaults)       doom       doom-dashboard       doom-quit       modeline       ophints       fill-column       hl-todo       nav-flash       neotree       vc-gutter       vi-tilde-fringe       window-select       :editor       (evil +everywhere)       file-templates       format       lispy       multiple-cursors       rotate-text       snippets       fold       :emacs       (dired +icons)       ;;ediff       electric       vc       :term       eshell       term       :checkers       spell       syntax       :tools       eval       (lookup        +devdocs        +docsets)       gist       make       magit       pass       rgb       tmux       upload       :lang       ;;agda              ; types of types of types of types...       ;;assembly          ; assembly for fun or debugging       ;; cc                ; C/C++/Obj-C madness       ;;clojure           ; java with a lisp       ;;common-lisp       ; if you've seen one lisp, you've seen them all       ;;coq               ; proofs-as-programs       ;;crystal           ; ruby at the speed of c       ;; csharp            ; unity, .NET, and mono shenanigans       data              ; config/data formats       ;;elixir            ; erlang done right       ;;elm               ; care for a cup of TEA?       emacs-lisp        ; drown in parentheses       ;;erlang            ; an elegant language for a more civilized age       ess               ; emacs speaks statistics       ;;faust             ; dsp, but you get to keep your soul       ;;fsharp           ; ML stands for Microsoft's Language       ;;fstar             ; (dependent) types and (monadic) effects and Z3       ;;go                ; the hipster dialect       ;;(haskell +dante)  ; a language that's lazier than I am       ;;hy                ; readability of scheme w/ speed of python       ;;idris             ;       ;;(java +meghanada) ; the poster child for carpal tunnel syndrome       ;;javascript        ; all(hope(abandon(ye(who(enter(here))))))       ;;julia             ; a better, faster MATLAB       ;;kotlin            ; a better, slicker Java(Script)       latex             ; writing papers in Emacs has never been so fun       ;;lean       ;;factor       ;;ledger            ; an accounting system in Emacs       ;;lua               ; one-based indices? one-based indices       markdown          ; writing docs for people to ignore       ;;nim               ; python + lisp at the speed of c       ;;nix               ; I hereby declare "nix geht mehr!"       ;;ocaml             ; an objective camel       (org              ; organize your plain life in plain text        +dragndrop       ; drag & drop files/images into org buffers        +hugo            ; use Emacs for hugo blogging        ;;+jupyter        ; ipython/jupyter support for babel        +pandoc          ; export-with-pandoc support        +attach        +babel        +capture        +export        ;;+pomodoro        ; be fruitful with the tomato technique        +present)        ; using org-mode for presentations       ;;perl              ; write code no one else can comprehend       ;;php               ; perl's insecure younger brother       ;;plantuml          ; diagrams for confusing people more       ;;purescript        ; javascript, but functional       ;; (python +conda +pyenv)            ; beautiful is better than ugly       ;;qt                ; the 'cutest' gui framework ever       ;;racket            ; a DSL for DSLs       ;;rest              ; Emacs as a REST client       ;;rst               ; ReST in peace       ;;(ruby +rails)     ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}       ;;rust              ; Fe2O3.unwrap().unwrap().unwrap().unwrap()       ;;scala             ; java, but good       ;;scheme            ; a fully conniving family of lisps       ;; (sh +fish)                ; she sells {ba,z,fi}sh shells on the C xor       ;;solidity          ; do you need a blockchain? No.       ;;swift             ; who asked for emoji variables?       ;;terra             ; Earth and Moon in alignment for performance.       ;; web               ; the tubes       :email       ;;(mu4e +gmail)       ;;notmuch       ;;(wanderlust +gmail)       :app       ;;calendar       ;;irc               ; how neckbeards socialize       ;;(rss +org)        ; emacs as an RSS reader       ;;twitter           ; twitter client https://twitter.com/vnought       ;;regex       :config       (default +bindings +smartparens)       literate);; (setq evil-want-C-u-scroll nil;;       evil-want-C-d-scroll nil)(setq evil-respect-visual-line-mode t)#+end_src** pacakges.el#+begin_src emacs-lisp :tangle no :exports code(package! term-cursor  :recipe (:host github :repo "h0d/term-cursor.el"))(package! osx-clipboard  :recipe (:host github :repo "joddie/osx-clipboard-mode"));; (package! centered-window;;   :recipe (:host github :repo "anler/centered-window-mode"))(package! org-journal)(package! adaptive-wrap)(package! ox-hugo);; (package! org-agenda-property)(package! polymode)(package! poly-markdown)(package! poly-R)(package! poly-org);; (package! simpleclip);; (package! cliphist);; (package! sublimity)(package! toc-org)(package! psession);; completion/company(package! prescient)(package! company-prescient);; completion/ivy(package! all-the-icons-ivy)(package! counsel-tramp);; emacs/dired(package! peep-dired)(package! diredfl);; feature/snippets(package! yasnippet-snippets);; lang/apache(package! apache-mode);; lang/pkgbuild(package! pkgbuild-mode);; lang/nginx(package! nginx-mode);; lang/org(package! ob-http);; lang/systemd(package! systemd);; lang/sh(package! flycheck-checkbashisms);; tools/tldr;; (package! tldr);; ui/doom; (package! doom-themes :recipe (:fetcher github :repo "brettm12345/emacs-doom-themes" :files ("*.el" "themes/*.el")));; (package! doom-palenight-theme :recipe (:fetcher github :repo "brettm12345/doom-palenight-theme"));; ui/modeline(package! doom-modeline)(package! anzu)(package! evil-anzu);; ui/indent-guides; (package! highlight-indent-guides)#+end_src