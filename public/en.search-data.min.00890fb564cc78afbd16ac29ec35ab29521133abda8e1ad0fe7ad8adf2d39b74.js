'use strict';(function(){const indexCfg={cache:true};indexCfg.doc={id:'id',field:['title','content'],store:['title','href'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/posts/','title':"Recent Posts",'content':"p test\n"});index.add({'id':1,'href':'/posts/R-Sandbox/','title':"Org R Sandbox",'content':"This post presents the workflow of interacting with R in org mode. I am mainly seeking three functions in this workflow: automatic output; persistent R session across multiple source blocks; ability to present both codes and outputs.\nPreparation  org-babel for executing and tangling source blocks ESS for interacting directly with R in emacs through the inferior R process  Instruction  set up proper sub-tree/buffer header arguments, for this blog post I used sub-tree header arguments: :header-args:R: :session *R* :exports both :eval no-export run org-bable-execute-src-block (or on sub-tree/buffer level) to produce outputs in the text area  Example Plot output  For the following code block, I used the source block header arguments #+begin_src R :results output graphics file :file test.svg :output-dir ~/itflows/static Note on the header arguments:  use :results graphics file when producing base R plot. use :results output graphics file for ggplot (see https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-R.html). remember to specify :output-dir as the static folder in your hugo directory, or else the org-link to the output plot after code evaluation will be directed to the same directory as the .org file by default     setwd(\u0026#39;~/itflows/static\u0026#39;) # output plot stored in the static directory of your hugo blog library(dplyr) library(ggplot2) print(ggplot(iris, aes(x = Sepal.Width, y = Sepal.Length)) + geom_point() + theme_bw() ) # If the source code block uses grid-based R graphics, e.g., the lattice and ggplot2 packages, then care must be taken either to print() the graphics object, specify :results output, or run the code in a :session\u0026#34;, use print() to produce proper .svg output square \u0026lt;- function(x) # test session persistency { x * x }   plot(matrix(rnorm(100), ncol=2), type=\u0026#34;h\u0026#34;)   Plain text output  source block header arguments: #+begin_src R :results output   square(1:10) [1] 1 4 9 16 25 36 49 64 81 100 "});index.add({'id':2,'href':'/posts/my-reference-literature-management-workflow/','title':"My Reference Management Workflow with Zotero",'content':"Get references  Search engine like Google scholar, or databases like Scopus Social network like email, journal club, researcher gate, rss of keywords or journals Remember to take note of search keywords and the thinking process  Why am I interested in this article? What leads me here (keyword, or citation from another article, or interested authors)   Save new references with proper tags as best as you can in Inbox collection for further processing  Review Inbox  Clean the citation format, see Citation format checking workflow Use Zotfile to rename attached pdf files and move the attachment to customized location, see Notes about Zotero plugins Add appropriate tag/notes  For articles that need deeper processing, add \u0026ldquo;todo\u0026rdquo; tag and read the article according to My Academic Reading Workflow   Move the articles out of Inbox to appropriate collection (cmd + drag) once reviewed  Citation format checking workflow  Check whether the item type is correct (book chapter, conference paper, journal article, etc.) Check whether the information is complete and correct: issue, doi, page, name spelling  if not, use google scholar or crossref to fetch/redownload the item, merge the old and new items make sure the citation key stays the same (extra: citation key, pick from older version) make sure old pdf file with annotations are not deleted Tips: conference proceedings (place and date, may need to use other versions from google scholar), dissertation thesis (need link or data base call number) and book chapters may need extra attention   Use full sentence case not APA sentence case (right click the title then choose sentence case), and not title case (e.g. Concerns of teachers: A developmental conceptualisation)  Use the references  In word document, use the Zotero add-on (cmd + opt + Z) In other documents, see Citation Syntax  Zotero bibliography management workflow  Tools → Storage Scanner, check entries with the broken_attachments and duplicate_attachments and nosource tags  broken_attachments: likely missing pdf duplicate_attachments: likely both linked and stored copy of the same attachment nosource: likely just for citation, no need to attach the original file   check \u0026ldquo;Duplicate Items\u0026rdquo;, merge both metadata and attachments choose all entries (or newly added entries), right click context menu choose \u0026ldquo;Manage Attachments\u0026rdquo; → Rename Attachments (now the renamed attachment should be moved to GoogleDrive/dropbox/Paper from the internal folder) delete internal folders with the stored copy of files in ~/Zotero/storage, close the zotero software at this step, also see Note about stored copy vs linked file in Zotero  Notes about Zotero plugins  https://www.zotero.org/support/plugins  Zotero Storage Scanner: check and tag the entries with broken or duplicate attachment link then generate corresponding tags  ZotFile: change setting in ZotFile Preferences in Tools  New PDF attachments: attach the most recent modified file from a folder as a new child attachment to the currently selected Zotero item Rename and move attachments: select any number of Zotero items and automatically rename and move all attachments of these items according to the user defined rules using metadata of the respective zotero item extract pdf annotations:  annotation extraction only works for highlights and comments, not text entries (directly type on the pdf page) only works for annotations saved together with the pdf files (therefore Skim notes won\u0026rsquo;t work as they are saved as separate files)    auto-index    Better BibTex: create unique and self-defined citation keys for LaTeX  Zotero DOI Manager: find, shorten, clean DOIs, and tag items with invalid DOIs  Zotero QuickLook: quick look attachment of an item  Zutilo: add many utility functions to Zotero, such as configure keyboard shortcuts, copy/paste tags, relate multiple items through select and context menu  Zotero OCR: recognize text when the pdf is image  Propachi: CSL processor, used for proper APA sentence case (choose Uppercase Subtitles)  Zotero Folder Import: import a folder of attachment files into a Zotero collection hierarchy  MDnotes for Zotero: Export item metadata and notes as Markdown files (unfortunately not the other way around)  Zotxt: Cite Zotero items in plain text (such as md, latex)   zotxt-emacs: manage citation keys for pandoc markdown documents as well as org mode links to Zotero items. currently im using this function just for taking notes    Zotero memento: when clipping new item from browser, attach a permanent link (from Internet achieves) in note and extra field of the item. I don\u0026rsquo;t need permanent url and don\u0026rsquo;t like the note it attached automatically, so no longer using this  zotero-find: find item in Zotero library from Emacs. Im not using this one rightnow because ZotHero for Alfred is more convenient, also because zotero-find doesn\u0026rsquo;t work when zotero is actually in use\u0026hellip;  Zotero Scholar Citations: add citaion counts of an item in the extra field ZSCC, not really working  Article tags  topic (construct, term, phenomenon)  e.g., noticing, prof_vision, prof_knowledge   sample (tageted group)  e.g., novice, teacher, learner, global   method (statistical procedure, data type)  type of stimulus/material: real, sim, video, text, type of instrument/measurement: interview, behavioral, em, rating type of stats procedure: e.g., spatial_analy   format (audiences)  review, empirical, evaluation, pratical    Related notes  /posts/compare-zotero-and-citavi/\nNote about stored copy vs linked file in Zotero  zotero manual\n by default, zotero save attachments as stored files in the \u0026ldquo;Storage\u0026rdquo; subfolder in \u0026ldquo;Data Directory Location\u0026rdquo; (currently ~/Zotero)  if using file syncing with Zotero, attachments have to be stored in internal folders currently im not using zotero sync (free account only has limited storage, and im not sharing my library with team), so there\u0026rsquo;s no need to save attachments in internal folders   linked files are saved in \u0026ldquo;Linked Attachment Base Directory\u0026rdquo;, and zotero saves the link  linked files are not copied into the default data directory unless use ZotFile (in ZotFile preferences, choose \u0026ldquo;Attach stored copy of file(s)\u0026rdquo; then use Manage Attachments in the right click context menu) linked files are suitable for workflow based on a folder   From stored file to linked file: use right click → Manage Attachments → Rename Attachments (function from ZotFile). the stored files will remain in the internal folder. From linked file to stored file: use Tools → Manage Attachments → Convert Linked Files to Stored Files. the linked files will remain in the original folder.  "});index.add({'id':3,'href':'/posts/my-academic-reading-workflow/','title':"My Academic Reading Workflow",'content':"Tools Skim  notes are saved in a separate .skim file, cannot be extracted in Zotero resolution not as sharp as acrobat only one highlight color no type machine function small and fast, good for note taking  Adobe Acrobat   highlights color coding:\n light green: key word  !       light yellow: key statement  !    light pink: method, operationalisation, key results  !       Preview  fast and simple, have all the necessary annotation functions, and can be extracted to Zotero rich hotkey support  Zotero  create child note while reading create notes for: quotation, summary, comment add or modify tags according to Article tags  MindNode  Use MindNode to create a map for the classic literatures/authors  Emacs + Zotero  requires Emacs package: pdf-tools, org-noter, zotxt requires Zotero plugin: zotxt, zotxt-emacs also see /posts/my-reference-literature-management-workflow/  Workflow in Emacs  in Zotero, open the attachment for annotation (set default pdf viewer to emacs) start org-noter, save a new note file, or an existing note file will shown M-i insert note at precise location (create a new heading in corresponding org notes file) document view → notes view: the note heading will automatically expand when scrolling through document buffer. navigate notes view → document view: M-p, M-., M-n sync previous/current/next note, meaning the document buffer will scroll to the location associated with the previous/current/next note org-noter-create-skeleton imports the PDF outline or annotations as notes  Template "});index.add({'id':4,'href':'/posts/My-Doom-Emacs-Configuration/','title':"My Doom Emacs Configuration",'content':"  Figure 1: Emacs main window in iTerm2\n    Figure 2: Emacs quickshow window with Org agenda\n  Intro Forewords  A few words about my background. I\u0026rsquo;m a researcher in the field of educational science. I am no programmer, other than borrowing codes from stack overflow all the time. My experience with plain text editors started with writing monkey,and then Sublime Text. But Emacs quickly replaced almost every app in both my work and leisure workflow. I\u0026rsquo;m currently using Emacs for almost all the tasks: develop R script, interacting with shell, composing long-format texts, publish personal blog, and manage my schedule as well as logging everyday journal. I\u0026rsquo;m using GNU Emacs under the Doom Emacs configuration framework on macOS.  I usually have two instances of Emacs running: terminal frame and Emacs GUI application. First approach with terminal frame: I\u0026rsquo;m running my Emacs in iTerm2\u0026ndash;a terminal emulator for macOS\u0026ndash;with zsh. Serve as quick-show window for org-agenda Second approach with GUI: Emacs-mac port, able to handle picture and pdf, and has smoother interface than Emacs-plus. Serve as the main editor.    Instructions Installation  To install GNU Emacs and Doom, run the following in terminal. References: https://github.com/hlissner/doom-emacs/blob/develop/docs/getting%5Fstarted.org#with-homebrew  brew install git ripgrep brew install coreutils fd xcode-select \u0026ndash;install\nbrew tap d12frosted/emacs-plus brew install emacs-plus ln -s /usr/local/opt/emacs-plus/Emacs.app /Applications/Emacs.app\nbrew tap railwaycat/emacsmacport brew install emacs-mac \u0026ndash;with-modules ln -s /usr/local/opt/emacs-mac/Emacs.app /Applications/Emacs.app\ngit clone https://github.com/hlissner/doom-emacs ~/.emacs.d ~/.emacs.d/bin/doom install emacs -nw\nDoom utility usage  Add export PATH=~/.emacs.d/bin:$PATH in .zshrc to use the bin/doom utility anywhere in terminal. Turn on literate in init.el in ~/.dooms.d, then create config.org in Emacs. (currently not working properly, 2020-08-27) Noting that the private config files are not stored in ~/.emacs.d. Add #+PROPERTY: header-args :tangle yes :cache yes :results silent :padline no~ anywhere in the config.org. Run M-x doom/reload in Emacs after changing the config.org, this will extract the Lisp source codes automatically to config.el. Run doom sync in terminal every time the contents in package.el has been changed.  Debug workflow  turn on toggle-debug-on-error, then doom/reload run doom doctor in terminal reinstall if couldn\u0026rsquo;t solve the issues  brew reinstall emacs/emacs-plus remove .doom.d and .emacs.d from ~/ (remember to backup!) reinstall doom emacs: git clone https://github.com/hlissner/doom-emacs then /.emacs.d ~/.emacs.d/bin/doom install    Global Backends Doom default (package-initialize t) (setq user-full-name \u0026#34;Eejain Huang\u0026#34; user-mail-address \u0026#34;huangyizhen2002@gmail.com\u0026#34;) Change the default encoding to UTF-8, more suitable for multi-lan environment (prefer-coding-system \u0026#39;utf-8) (set-default-coding-systems \u0026#39;utf-8) (set-terminal-coding-system \u0026#39;utf-8) (set-keyboard-coding-system \u0026#39;utf-8) (setq default-buffer-file-coding-system \u0026#39;utf-8) Do not create lockfiles for files being edited references: https://github.com/Brettm12345/doom-emacs-literate-config/blob/master/config.org#completioncompany\n(setq create-lockfiles nil) Company config reference: https://github.com/Brettm12345/doom-emacs-literate-config/blob/master/config.org#completioncompany\nSet maximum candidates for company-box (after! company-box (setq company-box-max-candidates 5)) Setup company-perscient (use-package company-prescient :after company :hook (company-mode . company-prescient-mode)) Setup company ui (after! company (setq company-tooltip-limit 5 company-tooltip-minimum-width 80 company-tooltip-minimum 5 company-backends \u0026#39;(company-capf company-dabbrev company-files company-yasnippet) company-global-modes \u0026#39;(not comint-mode erc-mode message-mode help-mode gud-mode))) Ivy config reference: https://github.com/Brettm12345/doom-emacs-literate-config/blob/master/config.org#completioncompany\nSet ripgrep as the default program for ivy project search (setq +ivy-project-search-engines \u0026#39;(rg)) Setup ivy-rich (after! ivy-rich (setq ivy-rich-display-transformers-list \u0026#39;(ivy-switch-buffer (:columns ((ivy-rich-candidate (:width 30 :face bold)) (ivy-rich-switch-buffer-size (:width 7 :face font-lock-doc-face)) (ivy-rich-switch-buffer-indicators (:width 4 :face error :align right)) (ivy-rich-switch-buffer-major-mode (:width 18 :face doom-modeline-buffer-major-mode)) (ivy-rich-switch-buffer-path (:width 50))) :predicate (lambda (cand) (get-buffer cand))) +ivy/switch-workspace-buffer (:columns ((ivy-rich-candidate (:width 30 :face bold)) (ivy-rich-switch-buffer-size (:width 7 :face font-lock-doc-face)) (ivy-rich-switch-buffer-indicators (:width 4 :face error :align right)) (ivy-rich-switch-buffer-major-mode (:width 18 :face doom-modeline-buffer-major-mode)) (ivy-rich-switch-buffer-path (:width 50))) :predicate (lambda (cand) (get-buffer cand))) counsel-M-x (:columns ((counsel-M-x-transformer (:width 40)) (ivy-rich-counsel-function-docstring (:face font-lock-doc-face :width 80)))) counsel-describe-function (:columns ((counsel-describe-function-transformer (:width 40)) (ivy-rich-counsel-function-docstring (:face font-lock-doc-face :width 80)))) counsel-describe-variable (:columns ((counsel-describe-variable-transformer (:width 40)) (ivy-rich-counsel-variable-docstring (:face font-lock-doc-face :width 80)))) counsel-recentf (:columns ((ivy-rich-candidate (:width 100)) (ivy-rich-file-last-modified-time (:face font-lock-doc-face))))))) (after! counsel (setq counsel-evil-registers-height 20 counsel-yank-pop-height 20 counsel-org-goto-face-style \u0026#39;org counsel-org-headline-display-style \u0026#39;title counsel-org-headline-display-tags t counsel-org-headline-display-todo t)) (after! ivy (setq ivy-posframe-parameters `((min-width . 160) (min-height . ,ivy-height) (left-fringe . 0) (right-fringe . 0) (internal-border-width . 10)) ivy-display-functions-alist \u0026#39;((counsel-git-grep) (counsel-grep) (counsel-pt) (counsel-ag) (counsel-rg) (counsel-notmuch) (swiper) (counsel-irony . ivy-display-function-overlay) (ivy-completion-in-region . ivy-display-function-overlay) (t . ivy-posframe-display-at-frame-center)))) (after! ivy (setq ivy-use-selectable-prompt t ivy-auto-select-single-candidate t ivy-rich-parse-remote-buffer nil +ivy-buffer-icons nil ivy-use-virtual-buffers nil ivy-magic-slash-non-match-action \u0026#39;ivy-magic-slash-non-match-cd-selected ivy-height 20 ivy-rich-switch-buffer-name-max-length 50)) Add helpful action to counsel-M-x (after! ivy (ivy-add-actions \u0026#39;counsel-M-x `((\u0026#34;h\u0026#34; +ivy/helpful-function \u0026#34;Helpful\u0026#34;)))) Setup counsel-tramp (use-package counsel-tramp :commands (counsel-tramp)) Setup all-the-icons-ivy (use-package all-the-icons-ivy :after ivy :config (dolist (cmd \u0026#39;( counsel-find-file counsel-file-jump projectile-find-file counsel-projectile-find-file counsel-dired-jump counsel-projectile-find-dir counsel-projectile-switch-project)) (ivy-set-display-transformer cmd #\u0026#39;all-the-icons-ivy-file-transformer))) Dired config reference: https://github.com/Brettm12345/doom-emacs-literate-config/blob/master/config.org#completioncompany\nSet dired-k to use human readable styles (after! dired-k (setq dired-k-human-readable t)) Set dired-k filesize colors (after! dired-k (setq dired-k-size-colors `((1024 . ,(doom-lighten (doom-color \u0026#39;green) 0.3)) (2048 . ,(doom-lighten (doom-color \u0026#39;green) 0.2)) (3072 . ,(doom-lighten (doom-color \u0026#39;green) 0.1)) (5120 . ,(doom-color \u0026#39;green)) (10240 . ,(doom-lighten (doom-color \u0026#39;yellow) 0.2)) (20480 . ,(doom-lighten (doom-color \u0026#39;yellow) 0.1)) (40960 . ,(doom-color \u0026#39;yellow)) (102400 . ,(doom-lighten (doom-color \u0026#39;orange) 0.2)) (262144 . ,(doom-lighten (doom-color \u0026#39;orange) 0.1)) (524288 . ,(doom-color \u0026#39;orange))))) Enable diredfl-mode on dired buffers (use-package diredfl :hook (dired-mode . diredfl-mode)) Setup peep-dired (use-package peep-dired :after dired :defer t :commands (peep-dired)) Global Looks Color scheme and font (setq doom-font (font-spec :family \u0026#34;Iosevka\u0026#34; :size 16) doom-variable-pitch-font (font-spec :family \u0026#34;Iosevka\u0026#34; :size 17)) (setq doom-theme \u0026#39;doom-solarized-light) (setq display-line-numbers-type \u0026#39;relative) Set up cursor shape in iTerm Emacs for indicating insert/normal mode Specific to iTerm environemnt and evil mode. The cursor shape of different Vim mode is identical by default. Use package term-cursor\n(use-package term-cursor) (global-term-cursor-mode) Function to configure visual line width References: https://www.emacswiki.org/emacs/VisualLineMode\n;; custom function to set certain wrap column width (defvar visual-wrap-column nil) (defun set-visual-wrap-column (new-wrap-column \u0026amp;optional buffer) \u0026#34;Force visual line wrap at NEW-WRAP-COLUMN in BUFFER (defaults to current buffer) by setting the right-hand margin on every window that displays BUFFER. A value of NIL or 0 for NEW-WRAP-COLUMN disables this behavior.\u0026#34; (interactive (list (read-number \u0026#34;New visual wrap column, 0 to disable: \u0026#34; (or visual-wrap-column fill-column 0)))) (if (and (numberp new-wrap-column) (zerop new-wrap-column)) (setq new-wrap-column nil)) (with-current-buffer (or buffer (current-buffer)) (visual-line-mode t) (set (make-local-variable \u0026#39;visual-wrap-column) new-wrap-column) (add-hook \u0026#39;window-configuration-change-hook \u0026#39;update-visual-wrap-column nil t) (let ((windows (get-buffer-window-list))) (while windows (when (window-live-p (car windows)) (with-selected-window (car windows) (update-visual-wrap-column))) (setq windows (cdr windows)))))) (defun update-visual-wrap-column () (if (not visual-wrap-column) (set-window-margins nil nil) (let* ((current-margins (window-margins)) (right-margin (or (cdr current-margins) 0)) (current-width (window-width)) (current-available (+ current-width right-margin))) (if (\u0026lt;= current-available visual-wrap-column) (set-window-margins nil (car current-margins)) (set-window-margins nil (car current-margins) (- current-available visual-wrap-column)))))) Sublime like elements reference: https://github.com/zk-phi/sublimity\n(require \u0026#39;sublimity) (require \u0026#39;sublimity-scroll) (setq sublimity-scroll-weight 10 sublimity-scroll-drift-length 5) ;; (require \u0026#39;sublimity-map) ;; experimental (require \u0026#39;sublimity-attractive) ;; start with center window view (centered-window-mode t) Global Editing Key binding for Emacs in iTerm environment  References: https://stackoverflow.com/questions/10660060/how-do-i-bind-c-in-emacs/40222318#40222318 Workflow:  in iTerm, set preferences-key add a keyboard shortcut with emacs key binding, choose Send Escape Sequence as the Action then use the my/global-map-and-set-key funtion below to bind the shortcut to the original    emacs function (find out the function by running describe the key function)\n the current key map in iTerm is saved in iterm_emacs.itermkeymap   ;; ;; define function (defun my/global-map-and-set-key (key command \u0026amp;optional prefix suffix) \u0026#34;`my/map-key\u0026#39;KEY then `global-set-key\u0026#39;KEY with COMMAND. PREFIX or SUFFIX can wrap the key when passing to `global-set-key\u0026#39;.\u0026#34; (my/map-key key) (global-set-key (kbd (concat prefix key suffix)) command)) (defun my/map-key (key) \u0026#34;Map KEY from escape sequence \\\u0026#34;\\e[emacs-KEY\\.\u0026#34; (define-key function-key-map (concat \u0026#34;\\e[emacs-\u0026#34; key) (kbd key))) ;; ;; the most important remapping, M-x (my/global-map-and-set-key \u0026#34;M-x\u0026#34; \u0026#39;counsel-M-x) ;; ;; comment/uncomment: first bind a new key sequence C-/ (subsitute s-/) for commenting codes, then map iterm key to emacs (map! (:after evil :m \u0026#34;C-/\u0026#34; #\u0026#39;evilnc-comment-or-uncomment-lines)) (my/global-map-and-set-key \u0026#34;C-/\u0026#34; \u0026#39;evilnc-comment-or-uncomment-lines) ;; ;; copy, cut, paste (my/global-map-and-set-key \u0026#34;s-x\u0026#34; \u0026#39;kill-region) (my/global-map-and-set-key \u0026#34;s-c\u0026#34; \u0026#39;evil-yank) (my/global-map-and-set-key \u0026#34;s-v\u0026#34; \u0026#39;evil-paste-after) ;; create new heading below: first change the default keybinding (s-return) to M-return (map! (:after evil :m \u0026#34;\u0026lt;M-return\u0026gt;\u0026#34; #\u0026#39;+default/newline-below)) (my/global-map-and-set-key \u0026#34;\u0026lt;M-return\u0026gt;\u0026#34; \u0026#39;+default/newline-below) ;; ;; move lines around (my/global-map-and-set-key \u0026#34;\u0026lt;M-up\u0026gt;\u0026#34; \u0026#39;drag-stuff-up) (my/global-map-and-set-key \u0026#34;\u0026lt;M-down\u0026gt;\u0026#34; \u0026#39;drag-stuff-down) ;; ;; meta drag (my/global-map-and-set-key \u0026#34;\u0026lt;M-S-up\u0026gt;\u0026#34; \u0026#39;org-shiftmetaup) (my/global-map-and-set-key \u0026#34;\u0026lt;M-S-down\u0026gt;\u0026#34; \u0026#39;org-shiftmetadown) ;; ;; outline promote/demote (metaleft/right) (my/global-map-and-set-key \u0026#34;M-h\u0026#34; \u0026#39;org-metaleft) (my/global-map-and-set-key \u0026#34;M-H\u0026#34; \u0026#39;org-shiftmetaleft) (my/global-map-and-set-key \u0026#34;M-l\u0026#34; \u0026#39;org-metaright) (my/global-map-and-set-key \u0026#34;M-L\u0026#34; \u0026#39;org-shiftmetaright) ;; ;; for evaluating r codes, not sure whether works or not yet (my/global-map-and-set-key \u0026#34;M-d\u0026#34; \u0026#39;evil-multiedit-match-symbol-and-next) ;; ;; currently I disabled arrow keys for navigation, but command(s) + arrow key still work, and in terminal, use shift + arrow keys for normal arrow key behavior ;; ;; use ctrl + hjkl to navigate in function menus (my/global-map-and-set-key \u0026#34;\u0026lt;s-left\u0026gt;\u0026#34; \u0026#39;evil-backward-char) (my/global-map-and-set-key \u0026#34;\u0026lt;s-right\u0026gt;\u0026#34; \u0026#39;evil-forward-char) (my/global-map-and-set-key \u0026#34;\u0026lt;s-down\u0026gt;\u0026#34; \u0026#39;evil-next-line) (my/global-map-and-set-key \u0026#34;\u0026lt;s-up\u0026gt;\u0026#34; \u0026#39;evil-previous-line) ;; ;; create a new delete shortcut for easier access (works in both normal and insert mode) (map! (:after evil :m \u0026#34;s-[\u0026#34; #\u0026#39;evil-delete-backward-char)) (my/global-map-and-set-key \u0026#34;s-[\u0026#34; \u0026#39;evil-delete-backward-char) ;; ;; for ess-r short cut (my/global-map-and-set-key \u0026#34;\u0026lt;C-return\u0026gt;\u0026#34; \u0026#39;ess-eval-line) (my/global-map-and-set-key \u0026#34;\u0026lt;C-S-return\u0026gt;\u0026#34; \u0026#39;ess-eval-region-or-function-or-paragraph) Copy paste from external clipboard (for terminal emacs window) (setq osx-clipboard-mode t) ;; copy/paste between macOS and Emacs[[https://emacs.stackexchange.com/questions/48607/os-copy-paste-not-working-for-emacs-mac][post]] (setq select-enable-clipboard t) (setq interprogram-paste-function (lambda () (shell-command-to-string \u0026#34;pbpaste\u0026#34;))) ARCV auto save and load current session layout (desktop)  State \u0026ldquo;ARCV\u0026rdquo; from \u0026ldquo;TODO\u0026rdquo; [2020-06-15 Mon 15:07]   ;; save current window layout and load later: https://emacs.stackexchange.com/questions/2710/switching-between-window-layouts ;; (defvar winstack-stack \u0026#39;() ;; \u0026#34;A Stack holding window configurations. ;; Use `winstack-push\u0026#39; and ;; `winstack-pop\u0026#39; to modify it.\u0026#34;) ;; (defun winstack-push() ;; \u0026#34;Push the current window configuration onto `winstack-stack\u0026#39;.\u0026#34; ;; (interactive) ;; (if (and (window-configuration-p (first winstack-stack)) ;; (compare-window-configurations (first winstack-stack) (current-window-configuration))) ;; (message \u0026#34;Current config already pushed\u0026#34;) ;; (progn (push (current-window-configuration) winstack-stack) ;; (message (concat \u0026#34;pushed \u0026#34; (number-to-string ;; (length (window-list (selected-frame)))) \u0026#34; frame config\u0026#34;))))) ;; (defun winstack-pop() ;; \u0026#34;Pop the last window configuration off `winstack-stack\u0026#39; and apply it.\u0026#34; ;; (interactive) ;; (if (first winstack-stack) ;; (progn (set-window-configuration (pop winstack-stack)) ;; (message \u0026#34;popped\u0026#34;)) ;; (message \u0026#34;End of window stack\u0026#34;))) ;; (use-package psession ;; :config ;; (psession-mode 1)) ARCV Chinese input pyim: https://github.com/tumashu/pyim\n;; (require \u0026#39;pyim) ;; (require \u0026#39;posframe) ;; (require \u0026#39;pyim-basedict) ; 拼音词库设置，五笔用户 *不需要* 此行设置 ;; (pyim-basedict-enable) ; 拼音词库，五笔用户 *不需要* 此行设置 ;; (setq default-input-method \u0026#34;pyim\u0026#34;) ;; (use-package pyim ;; :ensure nil ;; :demand t ;; :config ;; ;; ;; 激活 basedict 拼音词库，五笔用户请继续阅读 README ;; (use-package pyim-basedict ;; :ensure nil ;; :config (pyim-basedict-enable)) ;; ;; 我使用全拼 ;; ;; (setq pyim-default-scheme \u0026#39;quanpin) ;; ;; 设置 pyim 探针设置，这是 pyim 高级功能设置，可以实现 *无痛* 中英文切换 :-) ;; ;; 我自己使用的中英文动态切换规则是： ;; ;; 1. 光标只有在注释里面时，才可以输入中文。 ;; ;; 2. 光标前是汉字字符时，才能输入中文。 ;; ;; 3. 使用 M-j 快捷键，强制将光标前的拼音字符串转换为中文。 ;; (setq-default pyim-english-input-switch-functions ;; \u0026#39;(pyim-probe-dynamic-english ;; pyim-probe-isearch-mode ;; pyim-probe-program-mode ;; pyim-probe-org-structure-template)) ;; (setq-default pyim-punctuation-half-width-functions ;; \u0026#39;(pyim-probe-punctuation-line-beginning ;; pyim-probe-punctuation-after-punctuation)) ;; ;; 开启拼音搜索功能 ;; (pyim-isearch-mode 1) ;; ;; 使用 popup-el 来绘制选词框, 如果用 emacs26, 建议设置 ;; ;; 为 \u0026#39;posframe, 速度很快并且菜单不会变形，不过需要用户 ;; ;; 手动安装 posframe 包。 ;; (setq pyim-page-tooltip \u0026#39;posframe) ;; ;; 选词框显示5个候选词 ;; (setq pyim-page-length 5) ;; :bind ;; ((\u0026#34;M-j\u0026#34; . pyim-convert-string-at-point) ;与 pyim-probe-dynamic-english 配合 ;; (\u0026#34;C-;\u0026#34; . pyim-delete-word-from-personal-buffer))) Mouse scroll reference: http://ergoemacs.org/emacs/emacs%5Fmouse%5Fwheel%5Fconfig.html https://www.emacswiki.org/emacs/SmoothScrolling\n(global-set-key (kbd \u0026#34;\u0026lt;mouse-4\u0026gt;\u0026#34;) (lambda () (interactive) (scroll-down 1) (previous-line))) ;; non-natural scroll, mouse-4 is down (global-set-key (kbd \u0026#34;\u0026lt;mouse-5\u0026gt;\u0026#34;)(lambda () (interactive) (scroll-up 1) (next-line))) ;; (setq mouse-wheel-follow-mouse t) ;; scroll window under mouse ;; (setq scroll-preserve-screen-position t) Org Mode Backends Org directory references: https://lists.gnu.org/archive/html/emacs-orgmode/2009-10/msg00734.html\n;; set path abbreviation, useful for inserting org links, easier to change parent path later: https://stackoverflow.com/questions/24782184/emacs-org-mode-folder-alias-for-links-in-org-files (setq org-link-abbrev-alist \u0026#39;((\u0026#34;orgdirtxt\u0026#34; . \u0026#34;~/GoogleDrive/MarkdownNotes/MDNotes/\u0026#34;) (\u0026#34;orgdirimg\u0026#34; . \u0026#34;~/GoogleDrive/MarkdownNotes/MDImage/\u0026#34;))) (setq org-directory \u0026#34;~/GoogleDrive/MarkdownNotes/MDNotes\u0026#34;) (setq org-agenda-directory \u0026#34;~/GoogleDrive/MarkdownNotes/MDNotes/\u0026#34;) (setq org-agenda-files (directory-files (expand-file-name org-agenda-directory) t \u0026#34;^[^\\.][^#][[:alnum:]]+\\.org$\u0026#34;)) (setq org-default-notes-file (concat org-directory \u0026#34;/notes.org\u0026#34;)) Org keywords and tags Previously I cannot override these settings because I changed setting in M-x customization, now I deleted the content in ~/.emacs.d/.local/custom.el and add after! org, then things are fine: https://github.com/hlissner/doom-emacs/issues/546\n(after! org (setq org-todo-keywords \u0026#39;(;; Sequence for TASKS ;; TODO means it\u0026#39;s an item that needs addressing ;; PEND means it\u0026#39;s dependent on something else happening ;; CANC means it\u0026#39;s no longer necessary to finish ;; DONE means it\u0026#39;s complete (sequence \u0026#34;TODO(t@/!)\u0026#34; \u0026#34;DOIN(i@/!)\u0026#34; \u0026#34;PEND(p@/!)\u0026#34; \u0026#34;|\u0026#34; \u0026#34;DONE(d@/!)\u0026#34; \u0026#34;CANC(c@/!)\u0026#34;) ;; Sequence for MULTIMEDIA ;; MARK mark some media for future consuming ;; ING means currently consuming ;; REPO means the media has been consumed, and waiting to be shared in short or long form ;; ARCV media alrady repoed, now archive for future reference (sequence \u0026#34;MARK(m@/!)\u0026#34; \u0026#34;ING(i@/!)\u0026#34; \u0026#34;REPO(r@/!)\u0026#34; \u0026#34;|\u0026#34; \u0026#34;ARCV(a@/!)\u0026#34;) )) (setq org-todo-keyword-faces \u0026#39;((\u0026#34;DOIN\u0026#34; . (:foreground \u0026#34;red\u0026#34; :background \u0026#34;white\u0026#34; :weight bold)) (\u0026#34;PEND\u0026#34; (:foreground \u0026#34;white\u0026#34;)) )) ) Org setup references: https://github.com/sk8ingdom/.emacs.d/blob/master/org-mode-config/org-todo-states.el\n(after! org ;; prompt to record time and note when a task is completed (setq org-log-done \u0026#39;note) ;; prompt to record time and note when the scheduled date of a task is modified ;; (setq org-log-reschedule \u0026#39;note) ;; promopt to record time and note when the deadline of a task is modified ;; (setq org-log-redeadline \u0026#39;note) ;; promopt to record time and note when clocking out of a task ;; (setq org-log-clock-out \u0026#39;note) ;; hide done items in agenda view (setq org-agenda-skip-scheduled-if-done t) ;; set follow mode as default (setq org-agenda-start-with-follow-mode t) ;; set sorting of items to priority first (setq org-lowest-priority ?E) ;; the default priority level only consists of A B C, so E will always be the lowest (setq org-default-priority ?E) ;; the regular todos will be set to E by default, meaning no priority ;; set the scope of line-editing behavior to the visual line (not actual line) (setq vim-style-visual-line-move-text t) (setq org-src-fontify-natively t org-src-tab-acts-natively t org-confirm-babel-evaluate nil org-edit-src-content-indentation 0) (setq org-enforce-todo-dependencies t) ;; parent TODO task should not be marked as done until all TODO subtasks, or children tasks, are marked as done ) (with-eval-after-load \u0026#39;org (add-to-list \u0026#39;org-modules \u0026#39;org-habit t)) Org capture references: https://emacs.stackexchange.com/questions/19391/can-t-set-directory-for-org-mode-capture https://orgmode.org/manual/Template-expansion.html#Template-expansion https://github.com/sk8ingdom/.emacs.d/blob/master/org-mode-config/org-capture-templates.el\n(setq org-capture-templates \u0026#39;( (\u0026#34;t\u0026#34; \u0026#34;Todo\u0026#34; entry (file+headline \u0026#34;~/Googledrive/Markdownnotes/MDNotes/todo.org\u0026#34; \u0026#34;Inbox\u0026#34;) \u0026#34;* TODO %?\\n %U\\n\u0026#34;) (\u0026#34;d\u0026#34; \u0026#34;Drafts\u0026#34; entry (file+headline \u0026#34;~/Googledrive/Markdownnotes/MDNotes/todo.org\u0026#34; \u0026#34;Drafts\u0026#34;) \u0026#34;* ARCV %?\\n %U\\n\u0026#34;) (\u0026#34;j\u0026#34; \u0026#34;Journal\u0026#34; entry (function org-journal-find-location) \u0026#34;* %(format-time-string org-journal-time-format)%^{Title}\\n%i%?\u0026#34;) ) ) org-journal references: https://github.com/bastibe/org-journal\n(customize-set-variable \u0026#39;org-journal-dir \u0026#34;~/GoogleDrive/Markdownnotes/MDNotes/\u0026#34;) (customize-set-variable \u0026#39;org-journal-date-format \u0026#34;%A, %d %B %Y\u0026#34;) (customize-set-variable \u0026#39;org-journal-file-format \u0026#34;%Y%m%d.org\u0026#34;) (require \u0026#39;org-journal) ;; (use-package org-journal ;; :ensure t ;; :defer t ;; :custom ;; (org-journal-dir \u0026#34;~/GoogleDrive/MarkdownNotes/MDNotes/\u0026#34;) ;; (org-journal-file-format \u0026#34;%Y%m%d.org\u0026#34;) ;; (org-journal-date-format \u0026#34;%A, %B %d %Y\u0026#34;)) (defun org-journal-find-location () ;; Open today\u0026#39;s journal, but specify a non-nil prefix argument in order to ;; inhibit inserting the heading; org-capture will insert the heading. (org-journal-new-entry t) ;; Position point on the journal\u0026#39;s top-level heading so that org-capture ;; will add the new entry as a child entry. (goto-char (point-min))) org-babel Write plain text in org mode with embedded source block supported by Babel: active code in Org-mode also see https://orgmode.org/manual/Working-with-Source-Code.html\n(setq org-babel-load-languages \u0026#39;( (emacs-lisp. t) (lisp. t) (sh. t) (org. t) (python. t) (latex. t) (R. t))) ;; activate Babel languages (org-babel-do-load-languages \u0026#39;org-babel-load-languages org-babel-load-languages) (add-hook \u0026#39;org-babel-after-execute-hook \u0026#39;org-display-inline-images) (add-hook \u0026#39;org-mode-hook \u0026#39;org-display-inline-images) org agenda and calendar reference: https://github.com/kiwanami/emacs-calfw\n(require \u0026#39;calfw) (require \u0026#39;calfw-ical) (require \u0026#39;calfw-org) (setq cfw:org-overwrite-default-keybinding t) (setq calendar-week-start-day 1) ; 0:Sunday, 1:Monday ;; (define-key cfw:calendar-mode-map (kbd \u0026#34;\u0026lt;SPC-o\u0026gt;\u0026#34;) \u0026#39;cfw:show-details-command) ;; (define-key cfw:org-custom-map (kbd \u0026#34;SPC\u0026#34;) nil) (setq cfw:fchar-junction ?+ cfw:fchar-vertical-line ?| cfw:fchar-horizontal-line ?- cfw:fchar-left-junction ?+ cfw:fchar-right-junction ?+ cfw:fchar-top-junction ?+ cfw:fchar-top-left-corner ?+ cfw:fchar-top-right-corner ?+) ;; (setq cfw:org-agenda-schedule-args \u0026#39;(:tags-todo)) (defun mycal () (interactive) (cfw:open-calendar-buffer :view \u0026#39;week :contents-sources (list (cfw:org-create-source \u0026#34;Orange\u0026#34;) (cfw:ical-create-source \u0026#34;gcal\u0026#34; \u0026#34;https://calendar.google.com/calendar/ical/huangyizhen2002%40gmail.com/private-78a173f476129e08782df341dc7ab562/basic.ics\u0026#34; \u0026#34;IndianRed\u0026#34;) ))) Org Mode Looks Change the character that displays on collapsed headings (setq org-ellipsis \u0026#34; ▼ \u0026#34;) Line wrapping ;; visual line mode will wrap lines at the window border without actually insert line breaks (add-hook \u0026#39;org-mode-hook #\u0026#39;visual-line-mode) ;; turn off auto fill mode so there won\u0026#39;t be any hard line breaks after the wrap column (add-hook \u0026#39;org-mode-hook #\u0026#39;turn-off-auto-fill) ;; also add (setq evil-respect-visual-line-mode t) to init.el, enable navigation in visual line mode (evel-next-visual-line) (add-hook \u0026#39;org-mode-hook #\u0026#39;adaptive-wrap-prefix-mode) Org Mode Editing Key binding for showing all todo headings (global-set-key (kbd \u0026#34;C-c t\u0026#34;) \u0026#39;org-show-todo-tree) Key binding for outline quicklook/goto (global-set-key (kbd \u0026#34;C-c r\u0026#34;) \u0026#39;counsel-outline) Key binding for jumping to the end of the line (map! (:after evil :m \u0026#34;C-e\u0026#34; #\u0026#39;doom/forward-to-last-non-comment-or-eol)) Key binding to insert newlines above and below Similar to vim-unimpaired\n(map! (:after evil :m \u0026#34;] SPC\u0026#34; #\u0026#39;evil-motion-insert-newline-below :m \u0026#34;[ SPC\u0026#34; #\u0026#39;evil-motion-insert-newline-above)) Function to duplicate certain line inspired by Sublime Text cmd + shift + d (ref: https://stackoverflow.com/a/88828)\n(defun duplicate-line() (interactive) (move-beginning-of-line 1) (kill-line) (yank) (open-line 1) (forward-line 1) (yank) ) (global-set-key (kbd \u0026#34;C-c D\u0026#34;) \u0026#39;duplicate-line) Function to create new scratch buffer in Org ref: https://emacs.stackexchange.com/questions/16492/is-it-possible-to-create-an-org-mode-scratch-buffer\n(defun org-buffer-new () \u0026#34;Create a new scratch buffer -- \\*hello-world\\*\u0026#34; (interactive) (let ((n 0) bufname buffer) (catch \u0026#39;done (while t (setq bufname (concat \u0026#34;*org-scratch\u0026#34; (if (= n 0) \u0026#34;\u0026#34; (int-to-string n)) \u0026#34;*\u0026#34;)) (setq n (1+ n)) (when (not (get-buffer bufname)) (setq buffer (get-buffer-create bufname)) (with-current-buffer buffer (org-mode)) ;; When called non-interactively, the `t` targets the other window (if it exists). (throw \u0026#39;done (display-buffer buffer t))) )))) ;; SPC x is the default doom new scratch buffer key binding (global-set-key (kbd \u0026#34;C-c x\u0026#34;) \u0026#39;org-buffer-new) Auto update Org toc (if (require \u0026#39;toc-org nil t) (add-hook \u0026#39;org-mode-hook \u0026#39;toc-org-mode) ;; enable in markdown, too (add-hook \u0026#39;markdown-mode-hook \u0026#39;toc-org-mode)) Org Mode Reference Management pdf-tools https://emacs.stackexchange.com/questions/13314/install-pdf-tools-on-emacs-macosx\n first install poppler automake brew install poppler automake set pkg_config path so pkg-config can find certain libraries, such as export PKG_CONFIG_PATH=\u0026quot;/usr/local/opt/qt/lib/pkgconfig\u0026quot; export PKG_CONFIG_PATH=\u0026quot;/usr/local/opt/icu4c/lib/pkgconfig\u0026quot; then install epdfinfo brew tap dunn/emacs, brew install pdf-tools --HEAD update the package in the future: brew upgrade pdf-tools, then delete the old package via list-packages, restart Emacs and then reinstall the package.   (use-package pdf-tools :ensure t :config (custom-set-variables \u0026#39;(pdf-tools-handle-upgrades nil)) ; Use brew upgrade pdf-tools instead. (setq pdf-info-epdfinfo-program \u0026#34;/usr/local/bin/epdfinfo\u0026#34;)) (pdf-tools-install) org-noter (setq org-noter-set-auto-save-last-location t) Markdown Mode Looks ;; similar with org mode, use visual line mode without auto fill (add-hook \u0026#39;markdown-mode-hook #\u0026#39;visual-line-mode) (add-hook \u0026#39;markdown-mode-hook #\u0026#39;turn-off-auto-fill) ;; disable syntax checker (markdownlint-cli) for markdown mode (setq-default flycheck-disabled-checkers \u0026#39;(markdown-markdownlint-cli)) Hugo related config references: https://ox-hugo.scripter.co/ https://mstempl.netlify.com/post/static-website-with-emacs-and-hugo/\n(with-eval-after-load \u0026#39;ox (require \u0026#39;ox-hugo)) R related config ESS R config references: https://iqss.github.io/IQSS.emacs/init.html#run%5Fr%5Fin%5Femacs%5F(ess)\n(with-eval-after-load \u0026#34;ess\u0026#34; (require \u0026#39;ess-site) (require \u0026#39;ess-mode) ;; (define-key evil-normal-state-map (kbd \u0026#34;\u0026lt;SPC-e\u0026gt;\u0026#34;) \u0026#39;ess-execute)) ;; Set ESS options (setq ess-auto-width \u0026#39;window ess-use-auto-complete nil ess-use-company \u0026#39;t ;; ess-r-package-auto-set-evaluation-env nil inferior-ess-same-window \u0026#39;t ess-indent-with-fancy-comments nil ; don\u0026#39;t indent comments ess-eval-visibly t ; enable echoing input ess-eval-empty t ; don\u0026#39;t skip non-code lines. ess-ask-for-ess-directory nil ; start R in the working directory by default ess-R-font-lock-keywords ; font-lock, but not too much (quote ((ess-R-fl-keyword:modifiers) (ess-R-fl-keyword:fun-defs . t) (ess-R-fl-keyword:keywords . t) (ess-R-fl-keyword:assign-ops . t) (ess-R-fl-keyword:constants . 1) (ess-fl-keyword:fun-calls . t) (ess-fl-keyword:numbers) (ess-fl-keyword:operators . t) (ess-fl-keyword:delimiters) (ess-fl-keyword:=) (ess-R-fl-keyword:F\u0026amp;T))))) Combine R and markdown mode in one buffer with polymode (use-package polymode) (use-package poly-R) (use-package poly-markdown :config (add-to-list \u0026#39;auto-mode-alist \u0026#39;(\u0026#34;\\\\.rmd\u0026#34; . poly-markdown+R-mode)) ) (with-eval-after-load \u0026#34;markdown\u0026#34; (use-package poly-markdown)) (with-eval-after-load \u0026#34;org\u0026#34; (use-package poly-org)) "});index.add({'id':5,'href':'/posts/compare-zotero-and-citavi/','title':"A Quick Comparison between Zotero and Citavi",'content':"Citavi  my team is already using this software proprietary, mostly used by German institutions  Prossss  in-app pdf viewer, pretty fast compared to Acrobat, similar with Preview save pdf annotation directly in app embedded todo management powerful note taking system (Quotation) able to preview search result  Con     proprietary, not many users outside Germany (forum discussion mostly in German) only supports windows the transfer and sharing of references between projects is more effortful (import, export) unable to change interface font size, unable to change layout to column and row  Zotero  the reference management tool that I have used the longest and most often  Pros  free, light weight, open source, cross platform active community for Q\u0026amp;A and add-on development able to organize all references in library or in specific \u0026ldquo;Collection\u0026rdquo; better bibtex support  Cons  note taking ability is very limited and simplistic  Current pick 2020-08-26  still using zotero for my personal library, but use Citavi for a cloud project shared with my team (share articles with each other for journal club and journal briefing) importing Zotero bibtex to Citavi issues: no collection, tag, related (article) info  "});index.add({'id':6,'href':'/posts/Planning-2020-Beyond-Work-Life-Balance/','title':"Planning 2020 Beyond Work-Life Balance",'content':"A Broken Self and a New Decade With the tingly smell of mulled wine, the dazzling Christmas lights in Berlin streets, I found myself in a very dark place at the end of 2019: it\u0026rsquo;s the end of a decade yet my life is full of loose ends. Trying so hard to be the best version of myself as an instructor, a scholar, and a creator, I had, not literally, untied shoe laces that will trip myself over nothing every single day.\nI think I am not alone in this: the yearning for multitude of wonderful things ended up as a self-paralyzing force. The world is most ravishing in your fantasies, right? Unfortunately, daydreaming stopped to be pleasant after I realized how little had I done to reach my idealized world––a place that\u0026rsquo;s elegant, profound, gentle and intriguing , a world I would love to be a part of.\nSo I\u0026rsquo;ve picked up all the loose ends and started to sketch a road map to there. And this post is a record of what I have done.\nThe Three-layer Structure I would like to achieve two seemingly contradictory goals with my organization system: keep track of everything, and don\u0026rsquo;t overwhelm myself. My current workaround is a system with three nesting layers and each layer requires different degree of attention and monitoring (energy!).\nThe outmost layer is areas of life that I would like to balance on a daily basis. These are facet of life that I would make sure to give equal, unbiased energy and resource every single day. For most people, this could be just work and life. Me personally have three areas of life (serious/leisure/misc) which I will discuss in the next section.\nThe mid and second layer is sub-areas of life. They are also important and requires regular attention, but not on a daily basis. For example, I have four sub-areas in serious stuff: publication, academic development, teaching and organization. I would cycle through all these sub-areas every week, but the time invested on each sub-area might be different from week to week.\nThe innermost layer are projects that are SMART (specific, measurable, achievable, relevant, time-bound). They are actionable projects that would help me reaching the vision of a particular sub-area of life. Since they are time sensitive and have clear criteria for success, I can evaluate the process easily every week and month. Next, I would like to put these three layers into context and give them some very subjective definitions.\nIdentify Areas of Life Everything I do, every second I spend and every bit of energy I consume (even in off-state, even during sleeps) is motivated by certain needs. I do serious stuff for professional development, financial security, social status, all of which are necessary to earn a proper position in this society. I do leisure stuff for enjoyment, self fulfillment and human connection. And I do misc stuff for living as a responsible adult that takes care of her own health, finance, possessions, legal docs etc. I used to rank serious stuff \u0026gt; leisure stuff \u0026gt; misc stuff, now I understand (after several burnouts) that they refuel each other, and should be treated equally on a daily basis.\nMy three areas of life may not be everyone\u0026rsquo;s focus, but you can substitute anything that you deem precious and would like to keep a close eye on.\nCreate Sub-areas within Areas Using the area of life as a start point, what I did next is to write several statements to descriptive my prospect for each area. For example, I put down \u0026ldquo;I want to be a small expert in my small field\u0026rdquo; in the area of serious stuff, and I then formalized this vision into a sub-area called academic development. Eventually, I have four sub-areas in serious stuff: publication, academic development, teaching and organization; three sub-areas in leisure stuff: output, social, input; and two sub-areas in misc stuff: health (eating, skincare, workout, etc.) and chore (tax, record transaction, shopping, house cleaning, etc.). Noting that the sub-area of chore contains many elements, as they are not my focuses of life right now.\nCreate Projects within sub-areas The distinction between sub-areas and projects lies in whether they can be completed within a time frame. For example, health is a sub-area of my life that needs frequent investment, I cannot tick it off and say it\u0026rsquo;s done. But I may have various projects within this sub-area that can and should be completed after certain duration of time, such as run for 5 km without stop in two months. And in order to reach this very specific goal, I can set concrete to-dos and keep track of its progress.\nHow Does it Work in Real Life? The beauty of this system lies in the differentiated energy requirement for each layer. From area to sub-area to project, the degree of flexibility increase and active monitoring decrease.\nTo be more specific, at the start of a week, I will decide which sub-area(s) in each of the three areas I\u0026rsquo;m going to focus every day. The priority of sub-areas is determined by importance, urgency and sometimes, guts. I will try to work on every sub-area in a week, but not everyday. For instance, I may decide to work on serious\\_publication + leisure\\_input + misc\\_health on Monday, and change to serious\\_teach + leisure\\_output + misc\\_chore on Tuesday, and cycle through each sub-area throughout the week. This can be evaluated by the hour I spent in to-dos for each sub-area and adjusted during weekly review. Completion of a project take time and effort, but I don\u0026rsquo;t have to work on each project every day or every week, as long as it\u0026rsquo;s finished within the time frame defined by the project.\nEssentially, what I need to plan and monitor actively everyday is the time/energy spent on each area. I will review and plan sub-areas only once a week, and for projects, once a month.\nDoes it Work? Honestly, I don\u0026rsquo;t know yet, but this system has given me clarity and a sense of purpose for the past two weeks. It is my current answer to the dilemma of wanting everything and getting burned out along the way. Noting that it is definitely not a manual or solution, but rather a record of my attempt to gather and organize the gruesome but magnificent beast which is life. And as everything in life, it\u0026rsquo;s a work in progress.\nI think I\u0026rsquo;ve learned something along the way, but there\u0026rsquo;s also Rick Sanchez\u0026rsquo;s voice saying “Oh boy, so you actually learned something today? What is this, Full House?”, to which I want to answer: this is my best attempt to make sense of this world. And I hope it could be useful for the anonymous readers out there as well.\n"});index.add({'id':7,'href':'/posts/Citation-Syntax/','title':"Notes on Citation Syntax",'content':"## MMD:\n cite a paper: [locator][#citationkey] (locator is optional) cite multiple paper: [locator1][#citationkey1][locator2][citationkey2]\u0026hellip; inline citation: [#citationkey; locator]  ## Pandoc\n citation: Citations go inside square brackets and are separated by semicolons cite a paper: [@citekey, locator] cite multiple paper [@citekey, locator; @citekey, locator\u0026hellip;] inline citation: @citekey [locator]  ## bibtex BibTeX cheat sheet and entry templates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ by pts@fazekas.hu at Wed Jul 29 15:42:08 CEST 2009\nBased on information form http://en.wikipedia.org/wiki/BibTeX See also: http://amath.colorado.edu/documentation/LaTeX/reference/faq/bibstyles.html Nonstandard entries: url=, annote=, crossref=, No url= field in standard types, should be put to note={URL \\url{\u0026hellip;}}. There are no comments in BibTeX .bib files, not even % ?NAME= describes an optional field. BibTeX silently ignores a field whose name it doesn\u0026rsquo;t know. .bib file entry templates \u0026quot;\u0026rdquo;\u0026rdquo;\u0026rdquo;\u0026rdquo;\u0026rdquo;\u0026rdquo;\u0026rdquo;\u0026rdquo;\u0026rdquo;\u0026rdquo;\u0026rdquo;\u0026rdquo;\u0026rdquo;\u0026rdquo;\u0026rdquo;\u0026rdquo;\u0026rdquo;\u0026rdquo;\u0026rdquo;\u0026rdquo;\u0026rdquo;\u0026rdquo;\u0026rdquo;\u0026rdquo; @article{NAME, author={}, title={}, journal={}, year=, ?volume={}, ?number={}, ?pages={}, ?month=, ?note={}, ?key={}, }\n@book{NAME, author/editor={}, title={}, publisher={}, year=, ?volume={}, ?series={}, ?address={}, ?edition={}, ?month=, ?note={}, ?key={}, ?pages={}, }\n@booklet{NAME, title={}, ?author={}, ?howpublished={}, ?address={}, ?month=, ?year=, ?note={}, ?key={}, }\n@conference{NAME, author={}, title={}, booktitle={}, year=, ?editor={}, ?pages={}, ?organization={}, ?publisher={}, ?address={}, ?month=, ?note={}, ?key={}, }\n@inbook{NAME, author/editor={}, title={}, chapter/pages={}, publisher={}, year=, ?volume={}, ?series={}, ?address={}, ?edition={}, ?month=, ?note={}, ?key={}, }\n@incollection{NAME, author={}, title={}, booktitle={}, year=, ?editor={}, ?pages={}, ?organization={}, ?publisher={}, ?address={}, ?month=, ?note={}, ?key={}, }\n@inproceedings{NAME, author={}, title={}, booktitle={}, year=, ?editor={}, ?pages={}, ?organization={}, ?publisher={}, ?address={}, ?month=, ?note={}, ?key={}, }\n@manual{NAME, title={}, ?author={}, ?organization={}, ?address={}, ?edition={}, ?month=, ?year=, ?note={}, ?key={}, }\n@mastersthesis{NAME, author={}, title={}, school={}, year=, ?address={}, ?month=, ?note={}, ?key={}, }\n@misc{NAME, ?author={}, ?title={}, ?howpublished={}, ?month=, ?year=, ?note={}, ?key={}, }\n@phdthesis{NAME, author={}, title={}, school={}, year=, ?address={}, ?month=, ?note={}, ?key={}, }\n@proceedings{NAME, title={}, year=, ?editor={}, ?publisher={}, ?organization={}, ?address={}, ?month=, ?note={}, ?key={}, }\n@techreport{NAME, author={}, title={}, institution={}, year=={}, ?type={}, ?number={}, ?address={}, ?month=, ?note={}, ?key={}, }\n@unpublished{NAME, author={}, title={}, note={}, ?month=, ?year=, ?key={}, }\nDescription of entries and fields \u0026quot;\u0026rdquo;\u0026rdquo;\u0026rdquo;\u0026rdquo;\u0026rdquo;\u0026rdquo;\u0026rdquo;\u0026rdquo;\u0026rdquo;\u0026rdquo;\u0026rdquo;\u0026rdquo;\u0026rdquo;\u0026rdquo;\u0026rdquo;\u0026rdquo;\u0026rdquo;\u0026rdquo;\u0026rdquo;\u0026rdquo;\u0026rdquo;\u0026rdquo;\u0026rdquo;\u0026rdquo;\u0026rdquo;\u0026rdquo;\u0026rdquo;\u0026rdquo;\u0026rdquo;\u0026rdquo;\u0026rdquo;\u0026rdquo;\n@article: An article from a journal or magazine. @book: A book with an explicit publisher. @booklet: A work that is printed and bound, but without a named publisher or sponsoring institution.\n@conference: The same as inproceedings, included for Scribe compatibility. @inbook: A part of a book, usually untitled. May be a chapter (or section or whatever) and/or a range of pages.\n@incollection: A part of a book having its own title. @inproceedings: An article in a conference proceedings. @manual: Technical documentation. @mastersthesis: A Master\u0026rsquo;s thesis. @misc: For use when nothing else fits. @phdthesis: A Ph.D. thesis. @proceedings: The proceedings of a conference. @techreport: A report published by a school or other institution, usually numbered within a series.\n@unpublished: A document having an author and title, but not formally published.\naddress=: Publisher\u0026rsquo;s address (usually just the city, but can be the full address for lesser-known publishers)\nannote=: An annotation for annotated bibliography styles (not typical) author=: The name(s) of the author(s) (in the case of more than one author, separated by and)\nbooktitle=: The title of the book, if only part of it is being cited chapter=: The chapter number crossref=: The key of the cross-referenced entry edition=: The edition of a book, long form (such as \u0026ldquo;first\u0026rdquo; or \u0026ldquo;second\u0026rdquo;) editor=: The name(s) of the editor(s) eprint=: A specification of an electronic publication, often a preprint or a technical report\nhowpublished=: How it was published, if the publishing method is nonstandard institution=: The institution that was involved in the publishing, but not necessarily the publisher\njournal=: The journal or magazine the work was published in key=: A hidden field used for specifying or overriding the alphabetical order of entries (when the \u0026ldquo;author\u0026rdquo; and \u0026ldquo;editor\u0026rdquo; fields are missing). Note that this is very different from the key (mentioned just after this list) that is used to cite or cross-reference the entry.\nmonth=: The month of publication (or, if unpublished, the month of creation). Example 1=: month=jan. Example 2=: month=\u0026quot;17~\u0026rdquo; # feb.\nnote=: Miscellaneous extra information number=: The \u0026ldquo;number\u0026rdquo; of a journal, magazine, or tech-report, if applicable. (Most publications have a \u0026ldquo;volume\u0026rdquo;, but no \u0026ldquo;number\u0026rdquo; field.)\norganization=: The conference sponsor pages=: Page numbers, separated either by commas or double-hyphens. For books, the total number of pages.\npublisher=: The publisher\u0026rsquo;s name school=: The school where the thesis was written series=: The series of books the book was published in (e.g. \u0026ldquo;The Hardy Boys\u0026rdquo; or \u0026ldquo;Lecture Notes in Computer Science\u0026rdquo;)\ntitle=: The title of the work type=: The type of tech-report, for example, \u0026ldquo;Research Note\u0026rdquo; url=: The WWW address volume=: The volume of a journal or multi-volume book year=: The year of publication (or, if unpublished, the year of creation) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n## LaTex\n\\citet{} Textual citation: Jones et al. (1990) \\citet*{} Same as \\citet but if there are several authors, all names are printed: Jones, Baker, and Smith (1990) \\citep{} Parenthetical citation: (Jones et al. 1990) \\citep*{} The same as \\citep but if there are several authors, all names are printed: (Jones, Baker, and Smith 1990) \\citeauthor{}Prints only the name of the authors(s): Jones et al. \\citeauthor*{key}: Jones, Baker, and Smith \\citeyear{} Prints only the year of the publication.: 1990 \\citeapos{key}: Jones et al.\u0026lsquo;s (1990) \\cite[chapter, p.~215]{citation01}\n\\citet{jon90} \u0026ndash;\u0026gt; Jones et al. (1990) \\citet[chap. 2]{jon90} \u0026ndash;\u0026gt; Jones et al. (1990, chap. 2) \\citep{jon90} \u0026ndash;\u0026gt; (Jones et al., 1990) \\citep[chap. 2]{jon90} \u0026ndash;\u0026gt; (Jones et al., 1990, chap. 2) \\citep[see][]{jon90} \u0026ndash;\u0026gt; (see Jones et al., 1990) \\citep[see][chap. 2]{jon90} \u0026ndash;\u0026gt; (see Jones et al., 1990, chap. 2) \\citet*{jon90} \u0026ndash;\u0026gt; Jones, Baker, and Williams (1990) \\citep*{jon90} \u0026ndash;\u0026gt; (Jones, Baker, and Williams, 1990)\n#@academic #@codes\n"});index.add({'id':8,'href':'/docs/About/','title':"About",'content':"   \\(\\Bbb{MADE}\\enspace\\Bbb{BY}\\enspace\\color{#83A78D}\\mathcal{N}\\negmedspace\\negmedspace\\negthickspace{\\forall}\\)   Who is speaking?  Hi there, this is Eejain.\nMany tags can be attached to me: gender-queer, born and raised Chinese, a half-made geek plus self-taught scribbler, a young scholar dangling between publish or perish, and an enthusiast with all things quaint yet profound.\nBut none of them will stick.\nPared to the bone, I am just a curious soul that wants to share bits and pieces of thoughts with you.\n Where is this place?  Here on this site, I wrote about technology, academia and life in general. They are possibly opinionated but guaranteed to be honest. And on the flip side, I avoid documenting brief passing thoughts and plain life events. Those writings can be better approached by using social media, personal journal, and a good old diary.\nThis virtual folio starts as a serious writing practice outside academia, an earnest attempt to speak in my real voice about things that resonates with me. Things that maybe trivial and obscure, but at one point, rippled through my stream of consciousness and finds their niche.\nSo it flows. 1\n  The symbols in the website title represent the 59th hexagram in I Ching. It\u0026rsquo;s called 渙 (dispersing), depicting how wind blows water, causing dispersion and regathering in a fluid fashion. 『易經．渙卦．象曰：「風行水上，渙；先王以享于帝立廟。 \u0026#x21a9;\u0026#xfe0e;\n     "});index.add({'id':9,'href':'/docs/','title':"Docs",'content':""});})();